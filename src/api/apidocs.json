{
  "openapi": "3.0.0",
  "info": {
    "description": "Abelium INATrace Services API swagger documentation",
    "title": "INATrace Services API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080/"
    }
  ],
  "paths": {
    "/api/chain/action-type": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "action-type-controller"
        ],
        "operationId": "createOrUpdateActionTypeUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiActionType"
              }
            }
          },
          "description": "apiActionType",
          "required": true
        },
        "summary": "Create or update action type. If ID is provided the entity with the provided ID is updated."
      }
    },
    "/api/chain/action-type/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiActionType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "action-type-controller"
        ],
        "operationId": "getActionTypeListUsingGET",
        "summary": "Get a paginated list of action types."
      }
    },
    "/api/chain/action-type/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Action type ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "action-type-controller"
        ],
        "operationId": "deleteActionTypeUsingDELETE",
        "summary": "Deletes an action type with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "Record id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiActionType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "action-type-controller"
        ],
        "operationId": "getActionTypeUsingGET",
        "summary": "Get a single action type with the provided ID."
      }
    },
    "/api/chain/beyco-order/company/{companyId}/fields": {
      "get": {
        "parameters": [
          {
            "description": "ID's of selected stock orders",
            "explode": true,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "ID of company",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBeycoOrderFields_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "beyco-order-controller"
        ],
        "operationId": "getBeycoOrderFieldsForSelectedStockOrdersUsingGET",
        "summary": "Get list of fields necessary for Beyco order for selected Stock Orders"
      }
    },
    "/api/chain/beyco-order/company/{companyId}/order": {
      "post": {
        "parameters": [
          {
            "description": "JWT token",
            "in": "header",
            "name": "X-Beyco-Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of company",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_object_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "beyco-order-controller"
        ],
        "operationId": "sendBeycoOrderUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiBeycoOrderFields"
              }
            }
          },
          "description": "Beyco offer",
          "required": true
        },
        "summary": "Send order to Beyco"
      }
    },
    "/api/chain/beyco-order/company/{companyId}/token": {
      "get": {
        "parameters": [
          {
            "description": "Authorization code from Beyco OAuth2",
            "in": "query",
            "name": "authCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of company",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBeycoTokenResponse_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "beyco-order-controller"
        ],
        "operationId": "getTokenUsingGET",
        "summary": "Get OAuth2 token for Beyco integration"
      }
    },
    "/api/chain/beyco-order/company/{companyId}/token/refresh": {
      "get": {
        "parameters": [
          {
            "description": "Refresh token",
            "in": "header",
            "name": "X-Beyco-Refresh-Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of company",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBeycoTokenResponse_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "beyco-order-controller"
        ],
        "operationId": "refreshTokenUsingGET",
        "summary": "Refresh expired token"
      }
    },
    "/api/chain/csv/payments/company/{id}": {
      "post": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Preferred way of payment",
            "in": "query",
            "name": "preferredWayOfPayment",
            "required": false,
            "schema": {
              "enum": [
                "CASH",
                "CASH_VIA_COLLECTOR",
                "BANK_TRANSFER",
                "CHEQUE",
                "OFFSETTING",
                "UNKNOWN"
              ],
              "type": "string"
            }
          },
          {
            "description": "Payment status",
            "in": "query",
            "name": "paymentStatus",
            "required": false,
            "schema": {
              "enum": [
                "UNCONFIRMED",
                "CONFIRMED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Production date range start",
            "in": "query",
            "name": "productionDateStart",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Production date range end",
            "in": "query",
            "name": "productionDateEnd",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Search by farmer name",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "common-csv-controller"
        ],
        "operationId": "generatePaymentsByCompanyCsvUsingPOST",
        "summary": "Generate a csv file with a list of filtered payments by companyId."
      }
    },
    "/api/chain/csv/purchases/company/{id}": {
      "post": {
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Preferred way of payment",
            "in": "query",
            "name": "preferredWayOfPayment",
            "required": false,
            "schema": {
              "enum": [
                "CASH",
                "CASH_VIA_COLLECTOR",
                "BANK_TRANSFER",
                "CHEQUE",
                "OFFSETTING",
                "UNKNOWN"
              ],
              "type": "string"
            }
          },
          {
            "description": "Is women share",
            "in": "query",
            "name": "isWomenShare",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Production date range start",
            "in": "query",
            "name": "productionDateStart",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Production date range end",
            "in": "query",
            "name": "productionDateEnd",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Search by farmer name",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "common-csv-controller"
        ],
        "operationId": "generatePurchasesByCompanyCsvUsingPOST",
        "summary": "Generate a csv file with a list of filtered purchases by companyId."
      }
    },
    "/api/chain/currency-type/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiCurrencyType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "currency-type-controller"
        ],
        "operationId": "getCurrencyTypesUsingGET",
        "summary": "Get list of enabled and disables supported currencies"
      }
    },
    "/api/chain/currency-type/list/disabled": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiCurrencyType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "currency-type-controller"
        ],
        "operationId": "getDisabledCurrencyTypesUsingGET",
        "summary": "Get list of disabled supported currencies"
      }
    },
    "/api/chain/currency-type/list/enabled": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiCurrencyType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "currency-type-controller"
        ],
        "operationId": "getEnabledCurrencyTypesUsingGET",
        "summary": "Get list of enabled supported currencies"
      }
    },
    "/api/chain/currency-type/{id}/disable": {
      "put": {
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "currency-type-controller"
        ],
        "operationId": "disableCurrencyUsingPUT",
        "summary": "Disable currency with the specified ID"
      }
    },
    "/api/chain/currency-type/{id}/enable": {
      "put": {
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "currency-type-controller"
        ],
        "operationId": "enableCurrencyUsingPUT",
        "summary": "Enable currency with the specified ID"
      }
    },
    "/api/chain/currency/convert/{value}/{from}/to/{to}": {
      "get": {
        "parameters": [
          {
            "description": "from",
            "in": "path",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "to",
            "in": "path",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "value",
            "in": "path",
            "name": "value",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "number"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "currency-controller"
        ],
        "operationId": "convertUsingGET",
        "summary": "Convert a value between supported currencies"
      }
    },
    "/api/chain/currency/convert/{value}/{from}/to/{to}/on/{date}": {
      "get": {
        "parameters": [
          {
            "description": "value",
            "in": "path",
            "name": "value",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "from",
            "in": "path",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "to",
            "in": "path",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "date",
            "in": "path",
            "name": "date",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "number"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "currency-controller"
        ],
        "operationId": "convertAtDateUsingGET",
        "summary": "Convert a value between supported currencies at the specified date"
      }
    },
    "/api/chain/facility": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-controller"
        ],
        "operationId": "createOrUpdateFacilityUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiFacility"
              }
            }
          },
          "description": "apiFacility",
          "required": true
        },
        "summary": "Create or update facility. If ID is provided, then the entity with the provided ID is updated."
      }
    },
    "/api/chain/facility-type": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-type-controller"
        ],
        "operationId": "createOrUpdateFacilityTypeUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiFacilityType"
              }
            }
          },
          "description": "apiFacilityType",
          "required": true
        },
        "summary": "Create or update facility type. If ID is provided, the entity entity with the provided ID is updated."
      }
    },
    "/api/chain/facility-type/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiFacilityType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-type-controller"
        ],
        "operationId": "getFacilityTypeListUsingGET",
        "summary": "Get a paginated list of facility types."
      }
    },
    "/api/chain/facility-type/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Facility type ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-type-controller"
        ],
        "operationId": "deleteFacilityTypeUsingDELETE",
        "summary": "Deletes a facility type with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "Facility type ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiFacilityType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-type-controller"
        ],
        "operationId": "getFacilityTypeUsingGET",
        "summary": "Get a single facility type with the provided ID."
      }
    },
    "/api/chain/facility/list/collecting/company/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiFacility_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-controller"
        ],
        "operationId": "listCollectingFacilitiesByCompanyUsingGET",
        "summary": "Get a list of collecting facilities by company ID."
      }
    },
    "/api/chain/facility/list/company/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Semi product ID",
            "in": "query",
            "name": "semiProductId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Final product ID",
            "in": "query",
            "name": "finalProductId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiFacility_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-controller"
        ],
        "operationId": "listFacilitiesByCompanyUsingGET",
        "summary": "Get a list of facilities by company ID."
      }
    },
    "/api/chain/facility/list/company/{id}/all": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiFacility_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-controller"
        ],
        "operationId": "listAllFacilitiesByCompanyUsingGET",
        "summary": "listAllFacilitiesByCompany"
      }
    },
    "/api/chain/facility/list/company/{id}/available-selling": {
      "get": {
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Semi product ID",
            "in": "query",
            "name": "semiProductId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Final product ID",
            "in": "query",
            "name": "finalProductId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiFacility_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-controller"
        ],
        "operationId": "listAvailableSellingFacilitiesForCompanyUsingGET",
        "summary": "Get a list of public (selling) facilities that the provided company can see"
      }
    },
    "/api/chain/facility/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Facility ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-controller"
        ],
        "operationId": "deleteFacilityUsingDELETE",
        "summary": "Deletes a facility with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "Facility ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiFacility_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-controller"
        ],
        "operationId": "getFacilityUsingGET",
        "summary": "Get a single facility with the provided ID."
      }
    },
    "/api/chain/facility/{id}/activate": {
      "put": {
        "parameters": [
          {
            "description": "Facility ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-controller"
        ],
        "operationId": "activateFacilityUsingPUT",
        "summary": "Activate a facility"
      }
    },
    "/api/chain/facility/{id}/deactivate": {
      "put": {
        "parameters": [
          {
            "description": "Facility ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-controller"
        ],
        "operationId": "deactivateFacilityUsingPUT",
        "summary": "Deactivate a facility"
      }
    },
    "/api/chain/facility/{id}/detail": {
      "get": {
        "parameters": [
          {
            "description": "Facility ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiFacility_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "facility-controller"
        ],
        "operationId": "getFacilityDetailUsingGET",
        "summary": "Get a single facility with translations for the provided ID."
      }
    },
    "/api/chain/group-stock-order/list/facility/{facilityId}": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Facility ID",
            "in": "path",
            "name": "facilityId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Available orders only",
            "in": "query",
            "name": "availableOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Is purchase orders only",
            "in": "query",
            "name": "isPurchaseOrderOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Semi-product ID",
            "in": "query",
            "name": "semiProductId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiGroupStockOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "group-stock-order-controller"
        ],
        "operationId": "getGroupedStockOrderListUsingGET",
        "summary": "Get a paginated list of grouped stock orders."
      }
    },
    "/api/chain/measure-unit-type": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "measure-unit-type-controller"
        ],
        "operationId": "createOrUpdateMeasurementUnitTypeUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiMeasureUnitType"
              }
            }
          },
          "description": "apiMeasureUnitType",
          "required": true
        },
        "summary": "Create or update measurement unit type. If ID is provided, the entity with the provided ID is updated."
      }
    },
    "/api/chain/measure-unit-type/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiMeasureUnitType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "measure-unit-type-controller"
        ],
        "operationId": "getMeasureUnitTypeListUsingGET",
        "summary": "Get a paginated list of measurement types."
      }
    },
    "/api/chain/measure-unit-type/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Measurement unit type ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "measure-unit-type-controller"
        ],
        "operationId": "deleteMeasurementUnitTypeUsingDELETE",
        "summary": "Deletes a measurement with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "Measurement unit type ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiMeasureUnitType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "measure-unit-type-controller"
        ],
        "operationId": "getMeasurementUnitTypeUsingGET",
        "summary": "Get a single measurement unit type with the provided ID."
      }
    },
    "/api/chain/payment": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "payment-controller"
        ],
        "operationId": "createOrUpdatePaymentUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPayment"
              }
            }
          },
          "description": "apiPayment",
          "required": true
        },
        "summary": "Create or update payment. If ID is provided, then the entity with the provided ID is updated."
      }
    },
    "/api/chain/payment/bulk-payment": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "payment-controller"
        ],
        "operationId": "createBulkPaymentUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiBulkPayment"
              }
            }
          },
          "description": "apiBulkPayment",
          "required": true
        },
        "summary": "Create bulk payment."
      }
    },
    "/api/chain/payment/bulk-payment/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Bulk payment ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBulkPayment_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "payment-controller"
        ],
        "operationId": "getBulkPaymentUsingGET",
        "summary": "Get a single bulk payment with the provided ID."
      }
    },
    "/api/chain/payment/list/bulk-payment/company/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiBulkPayment_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "payment-controller"
        ],
        "operationId": "listBulkPaymentsByCompanyUsingGET",
        "summary": "Get a list of bulk payments by company ID."
      }
    },
    "/api/chain/payment/list/company/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Preferred way of payment",
            "in": "query",
            "name": "preferredWayOfPayment",
            "required": false,
            "schema": {
              "enum": [
                "CASH",
                "CASH_VIA_COLLECTOR",
                "BANK_TRANSFER",
                "CHEQUE",
                "OFFSETTING",
                "UNKNOWN"
              ],
              "type": "string"
            }
          },
          {
            "description": "Payment status",
            "in": "query",
            "name": "paymentStatus",
            "required": false,
            "schema": {
              "enum": [
                "UNCONFIRMED",
                "CONFIRMED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Production date range start",
            "in": "query",
            "name": "productionDateStart",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Production date range end",
            "in": "query",
            "name": "productionDateEnd",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Search by farmer name",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search by farmer id",
            "in": "query",
            "name": "farmerId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Search by representative of farmer id",
            "in": "query",
            "name": "representativeOfRecipientUserCustomerId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiPayment_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "payment-controller"
        ],
        "operationId": "listPaymentsByCompanyUsingGET",
        "summary": "Get a list of payments by company ID."
      }
    },
    "/api/chain/payment/list/purchase/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Purchase ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Preferred way of payment",
            "in": "query",
            "name": "preferredWayOfPayment",
            "required": false,
            "schema": {
              "enum": [
                "CASH",
                "CASH_VIA_COLLECTOR",
                "BANK_TRANSFER",
                "CHEQUE",
                "OFFSETTING",
                "UNKNOWN"
              ],
              "type": "string"
            }
          },
          {
            "description": "Payment status",
            "in": "query",
            "name": "paymentStatus",
            "required": false,
            "schema": {
              "enum": [
                "UNCONFIRMED",
                "CONFIRMED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Production date range start",
            "in": "query",
            "name": "productionDateStart",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Production date range end",
            "in": "query",
            "name": "productionDateEnd",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Search by farmer name",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiPayment_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "payment-controller"
        ],
        "operationId": "listPaymentsByPurchaseUsingGET",
        "summary": "Get a list of payments by purchase order (stock order) ID."
      }
    },
    "/api/chain/payment/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Payment ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "payment-controller"
        ],
        "operationId": "deletePaymentUsingDELETE",
        "summary": "Deletes a payment with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "Payment ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiPayment_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "payment-controller"
        ],
        "operationId": "getPaymentUsingGET",
        "summary": "Get a single payment with the provided ID."
      }
    },
    "/api/chain/processing-action": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-action-controller"
        ],
        "operationId": "createOrUpdateProcessingActionUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProcessingAction"
              }
            }
          },
          "description": "apiProcessingAction",
          "required": true
        },
        "summary": "Create or update processing action. If ID is provided, then the entity with the provided ID is updated."
      }
    },
    "/api/chain/processing-action/list/company/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Processing action type",
            "in": "query",
            "name": "actionType",
            "required": false,
            "schema": {
              "enum": [
                "PROCESSING",
                "FINAL_PROCESSING",
                "SHIPMENT",
                "TRANSFER",
                "GENERATE_QR_CODE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Only final product actions",
            "in": "query",
            "name": "onlyFinalProducts",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProcessingAction_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-action-controller"
        ],
        "operationId": "listProcessingActionsByCompanyUsingGET",
        "summary": "Get a list of processing actions by company ID."
      }
    },
    "/api/chain/processing-action/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "ProcessingAction ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-action-controller"
        ],
        "operationId": "deleteProcessingActionUsingDELETE",
        "summary": "Deletes a processing action with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "ProcessingAction ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProcessingAction_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-action-controller"
        ],
        "operationId": "getProcessingActionUsingGET",
        "summary": "Get a single processing action with the provided ID."
      }
    },
    "/api/chain/processing-action/{id}/detail": {
      "get": {
        "parameters": [
          {
            "description": "ProcessingAction ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProcessingAction_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-action-controller"
        ],
        "operationId": "getProcessingActionDetailUsingGET",
        "summary": "Get a single processing action by the provided ID with all translations."
      }
    },
    "/api/chain/processing-evidence-field": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-field-controller"
        ],
        "operationId": "createOrUpdateProcessingEvidenceFieldUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProcessingEvidenceField"
              }
            }
          },
          "description": "apiProcessingEvidenceField",
          "required": true
        },
        "summary": "Create or update processing evidence field. If ID is provided, then the entity with the provided ID is updated."
      }
    },
    "/api/chain/processing-evidence-field/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProcessingEvidenceField_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-field-controller"
        ],
        "operationId": "getProcessingEvidenceFieldListUsingGET",
        "summary": "Get a paginated list of processing evidence fields."
      }
    },
    "/api/chain/processing-evidence-field/list/by-value-chains": {
      "get": {
        "parameters": [
          {
            "description": "Value chain IDs",
            "explode": true,
            "in": "query",
            "name": "valueChainIds",
            "required": true,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProcessingEvidenceField_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-field-controller"
        ],
        "operationId": "listProcessingEvidenceFieldsByValueChainsUsingGET",
        "summary": "Get a list of processing evidence fields by value chain ID list."
      }
    },
    "/api/chain/processing-evidence-field/list/value-chain/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Value chain ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProcessingEvidenceField_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-field-controller"
        ],
        "deprecated": true,
        "operationId": "listProcessingEvidenceFieldsByValueChainUsingGET",
        "summary": "Get a list of processing evidence fields by value chain ID."
      }
    },
    "/api/chain/processing-evidence-field/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "ProcessingEvidenceField ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-field-controller"
        ],
        "operationId": "deleteProcessingEvidenceFieldUsingDELETE",
        "summary": "Deletes a processing evidence field with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "ProcessingEvidenceField ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProcessingEvidenceField_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-field-controller"
        ],
        "operationId": "getProcessingEvidenceFieldUsingGET",
        "summary": "Get a single processing evidence field with the provided ID."
      }
    },
    "/api/chain/processing-evidence-type": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-type-controller"
        ],
        "operationId": "createOrUpdateProcessingEvidenceTypeUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProcessingEvidenceType"
              }
            }
          },
          "description": "apiProcessingEvidenceType",
          "required": true
        },
        "summary": "Create or update processing evidence type. If ID is provided, the entity with the provided ID is updated."
      }
    },
    "/api/chain/processing-evidence-type/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProcessingEvidenceType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-type-controller"
        ],
        "operationId": "getProcessingEvidenceTypeListUsingGET",
        "summary": "Get a paginated list of processing evidence types."
      }
    },
    "/api/chain/processing-evidence-type/list/by-value-chains": {
      "get": {
        "parameters": [
          {
            "description": "Value chain IDs",
            "explode": true,
            "in": "query",
            "name": "valueChainIds",
            "required": true,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProcessingEvidenceType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-type-controller"
        ],
        "operationId": "listProcessingEvidenceTypesByValueChainsUsingGET",
        "summary": "Get a list of processing evidence types by value chain ID list."
      }
    },
    "/api/chain/processing-evidence-type/list/value-chain/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Value chain ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProcessingEvidenceType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-type-controller"
        ],
        "deprecated": true,
        "operationId": "listProcessingEvidenceTypesByValueChainUsingGET",
        "summary": "Get a list of processing evidence types by value chain ID."
      }
    },
    "/api/chain/processing-evidence-type/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Processing evidence type ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-type-controller"
        ],
        "operationId": "deleteProcessingEvidenceTypeUsingDELETE",
        "summary": "Deletes a processing evidence type with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "Processing evidence type ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProcessingEvidenceType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-evidence-type-controller"
        ],
        "operationId": "getProcessingEvidenceTypeUsingGET",
        "summary": "Get a single processing evidence type with the provided ID."
      }
    },
    "/api/chain/processing-order": {
      "put": {
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-order-controller"
        ],
        "operationId": "createOrUpdateProcessingOrderUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProcessingOrder"
              }
            }
          },
          "description": "apiProcessingOrder",
          "required": true
        },
        "summary": "Create or update processing order. If the ID is provided, then the entity with the provided ID is updated."
      }
    },
    "/api/chain/processing-order/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "ProcessingOrder ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-order-controller"
        ],
        "operationId": "deleteProcessingOrderUsingDELETE",
        "summary": "Deletes a processing order with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "ProcessingOrder ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProcessingOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "processing-order-controller"
        ],
        "operationId": "getProcessingOrderUsingGET",
        "summary": "Get a single processing order with the provided ID."
      }
    },
    "/api/chain/product-order": {
      "post": {
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-order-controller"
        ],
        "operationId": "createProductOrderUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductOrder"
              }
            }
          },
          "description": "apiProductOrder",
          "required": true
        },
        "summary": "Create product order."
      }
    },
    "/api/chain/product-order/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Product order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProductOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-order-controller"
        ],
        "operationId": "getProductOrderUsingGET",
        "summary": "Get a single product order with the provided ID."
      }
    },
    "/api/chain/semi-product": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "semi-product-controller"
        ],
        "operationId": "createOrUpdateSemiProductUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSemiProduct"
              }
            }
          },
          "description": "apiSemiProduct",
          "required": true
        },
        "summary": "Create or update semi product. If ID is provided, the entity with the provided ID is updated."
      }
    },
    "/api/chain/semi-product/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiSemiProduct_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "semi-product-controller"
        ],
        "operationId": "getSemiProductListUsingGET",
        "summary": "Get a paginated list of semi products."
      }
    },
    "/api/chain/semi-product/list/by-value-chains": {
      "get": {
        "parameters": [
          {
            "description": "Value chain IDs",
            "explode": true,
            "in": "query",
            "name": "valueChainIds",
            "required": true,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiSemiProduct_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "semi-product-controller"
        ],
        "operationId": "getSemiProductListByValueChainsUsingGET",
        "summary": "Get a paginated list of semi products for given value-chain list"
      }
    },
    "/api/chain/semi-product/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Semi product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "semi-product-controller"
        ],
        "operationId": "deleteSemiProductUsingDELETE",
        "summary": "Deletes a semi product with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "Semi product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiSemiProduct_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "semi-product-controller"
        ],
        "operationId": "getSemiProductUsingGET",
        "summary": "Get a single semi product with the provided ID."
      }
    },
    "/api/chain/semi-product/{id}/detail": {
      "get": {
        "parameters": [
          {
            "description": "Semi product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiSemiProduct_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "semi-product-controller"
        ],
        "operationId": "getSemiProductDetailsUsingGET",
        "summary": "Get a single semi product with details with the provided ID."
      }
    },
    "/api/chain/stock-order": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "createOrUpdateStockOrderUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiStockOrder"
              }
            }
          },
          "description": "apiStockOrder",
          "required": true
        },
        "summary": "Create or update stock order. If the ID is provided, then the entity with the provided ID is updated."
      }
    },
    "/api/chain/stock-order/bulk-purchase": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiPurchaseOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "createPurchaseOrderBulkUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPurchaseOrder"
              }
            }
          },
          "description": "apiPurchaseOrder",
          "required": true
        },
        "summary": "Creates a list of purchase orders."
      }
    },
    "/api/chain/stock-order/list/company/{companyId}": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company ID",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Farmer (UserCustomer) ID",
            "in": "query",
            "name": "farmerId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Representative of farmer (UserCustomer) ID",
            "in": "query",
            "name": "representativeOfProducerUserCustomerId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Is open balance only",
            "in": "query",
            "name": "isOpenBalanceOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Is purchase orders only",
            "in": "query",
            "name": "isPurchaseOrderOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Available orders only",
            "in": "query",
            "name": "availableOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Semi-product ID",
            "in": "query",
            "name": "semiProductId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Is women share",
            "in": "query",
            "name": "isWomenShare",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Way of payment",
            "in": "query",
            "name": "wayOfPayment",
            "required": false,
            "schema": {
              "enum": [
                "CASH",
                "CASH_VIA_COLLECTOR",
                "BANK_TRANSFER",
                "CHEQUE",
                "OFFSETTING",
                "UNKNOWN"
              ],
              "type": "string"
            }
          },
          {
            "description": "Order type",
            "in": "query",
            "name": "orderType",
            "required": false,
            "schema": {
              "enum": [
                "PURCHASE_ORDER",
                "PROCESSING_ORDER",
                "GENERAL_ORDER",
                "TRANSFER_ORDER"
              ],
              "type": "string"
            }
          },
          {
            "description": "Production date range start",
            "in": "query",
            "name": "productionDateStart",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Production date range end",
            "in": "query",
            "name": "productionDateEnd",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Search by ProducerUserCustomer name",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiStockOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "getStockOrderListByCompanyIdUsingGET",
        "summary": "Get a paginated list of stock orders by company ID."
      }
    },
    "/api/chain/stock-order/list/company/{companyId}/orders-for-customers": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company ID",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Facility ID",
            "in": "query",
            "name": "facilityId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Company customer ID",
            "in": "query",
            "name": "companyCustomerId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Return only open stock orders",
            "in": "query",
            "name": "openOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiStockOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "getStockOrdersInFacilityForCustomerUsingGET",
        "summary": "Get a paginated list of stock orders by facility ID for customers."
      }
    },
    "/api/chain/stock-order/list/company/{companyId}/quote-orders": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Quote company ID",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Quote facility ID",
            "in": "query",
            "name": "facilityId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Semi-product ID",
            "in": "query",
            "name": "semiProductId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Return only open stock orders",
            "in": "query",
            "name": "openOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiStockOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "getQuoteOrdersInFacilityUsingGET",
        "summary": "getQuoteOrdersInFacility"
      }
    },
    "/api/chain/stock-order/list/facility/{facilityId}": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Facility ID",
            "in": "path",
            "name": "facilityId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Is open balance only",
            "in": "query",
            "name": "isOpenBalanceOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Is purchase orders only",
            "in": "query",
            "name": "isPurchaseOrderOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Available orders only",
            "in": "query",
            "name": "availableOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Semi-product ID",
            "in": "query",
            "name": "semiProductId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Is women share",
            "in": "query",
            "name": "isWomenShare",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Way of payment",
            "in": "query",
            "name": "wayOfPayment",
            "required": false,
            "schema": {
              "enum": [
                "CASH",
                "CASH_VIA_COLLECTOR",
                "BANK_TRANSFER",
                "CHEQUE",
                "OFFSETTING",
                "UNKNOWN"
              ],
              "type": "string"
            }
          },
          {
            "description": "Production date range start",
            "in": "query",
            "name": "productionDateStart",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Production date range end",
            "in": "query",
            "name": "productionDateEnd",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Search by ProducerUserCustomer name",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiStockOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "getStockOrderListByFacilityIdUsingGET",
        "summary": "Get a paginated list of stock orders by facility ID."
      }
    },
    "/api/chain/stock-order/list/facility/{facilityId}/available": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Facility ID",
            "in": "path",
            "name": "facilityId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Semi-product ID",
            "in": "query",
            "name": "semiProductId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Final product ID",
            "in": "query",
            "name": "finalProductId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Is women share",
            "in": "query",
            "name": "isWomenShare",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Organic only",
            "in": "query",
            "name": "organicOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Internal LOT name",
            "in": "query",
            "name": "internalLotName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Production date range start",
            "in": "query",
            "name": "productionDateStart",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Production date range end",
            "in": "query",
            "name": "productionDateEnd",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiStockOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "getAvailableStockForStockUnitInFacilityUsingGET",
        "summary": "Get a paginated list of stock orders for provided facility ID and semi-product or final product ID."
      }
    },
    "/api/chain/stock-order/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "StockOrder ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "deleteStockOrderUsingDELETE",
        "summary": "Deletes a stock order with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "StockOrder ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Return the processing order base data",
            "in": "query",
            "name": "withProcessingOrder",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiStockOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "getStockOrderUsingGET",
        "summary": "Get a single stock order with the provided ID."
      }
    },
    "/api/chain/stock-order/{id}/aggregated-history": {
      "get": {
        "parameters": [
          {
            "description": "StockOrder ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiStockOrderHistory_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "getStockOrderAggregatedHistoryUsingGET",
        "summary": "getStockOrderAggregatedHistory"
      }
    },
    "/api/chain/stock-order/{id}/processing-order": {
      "get": {
        "parameters": [
          {
            "description": "StockOrder ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProcessingOrder_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "stock-order-controller"
        ],
        "operationId": "getStockOrderProcessingOrderUsingGET",
        "summary": "Get the Processing order that contains the Stock order with the provided ID."
      }
    },
    "/api/chain/transaction/list/input/stock-order/{stockOrderId}": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "stockOrderId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiTransaction_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "transaction-controller"
        ],
        "operationId": "getStockOrderInputTransactionsUsingGET",
        "summary": "Get a paginated list of input transactions for provided stock order ID."
      }
    },
    "/api/chain/transaction/{id}/approve": {
      "put": {
        "parameters": [
          {
            "description": "Transaction ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "transaction-controller"
        ],
        "operationId": "approveTransactionUsingPUT",
        "summary": "Approves transaction with provided ID."
      }
    },
    "/api/chain/transaction/{id}/reject": {
      "put": {
        "parameters": [
          {
            "description": "Transaction ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "transaction-controller"
        ],
        "operationId": "rejectTransactionUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTransaction"
              }
            }
          },
          "description": "apiTransaction",
          "required": true
        },
        "summary": "Rejects transaction with provided ID and reverts it's quantities."
      }
    },
    "/api/chain/value-chain": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "value-chain-controller"
        ],
        "operationId": "createOrUpdateValueChainUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiValueChain"
              }
            }
          },
          "description": "apiValueChain",
          "required": true
        },
        "summary": "Create or update value chain. If ID is provided, the entity with the provided ID is updated."
      }
    },
    "/api/chain/value-chain/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Value chain name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Value chain status",
            "in": "query",
            "name": "valueChainStatus",
            "required": false,
            "schema": {
              "enum": [
                "ENABLED",
                "DISABLED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Value chain product type ID",
            "in": "query",
            "name": "productTypeId",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiValueChain_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "value-chain-controller"
        ],
        "operationId": "getValueChainListUsingGET",
        "summary": "Get a list of value chains defined in the system."
      }
    },
    "/api/chain/value-chain/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Value chain ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "value-chain-controller"
        ],
        "operationId": "deleteValueChainUsingDELETE",
        "summary": "Deletes a value chain with the provided ID."
      },
      "get": {
        "parameters": [
          {
            "description": "Value chain ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiValueChain_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "value-chain-controller"
        ],
        "operationId": "getValueChainUsingGET",
        "summary": "Get a single value chain with the provided ID."
      }
    },
    "/api/chain/value-chain/{id}/disable": {
      "post": {
        "parameters": [
          {
            "description": "Value chain ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "value-chain-controller"
        ],
        "operationId": "disableValueChainUsingPOST",
        "summary": "Set the status of the value chain with the provided ID as 'DISABLED'."
      }
    },
    "/api/chain/value-chain/{id}/enable": {
      "post": {
        "parameters": [
          {
            "description": "Value chain ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "value-chain-controller"
        ],
        "operationId": "enableValueChainUsingPOST",
        "summary": "Set the status of the value chain with the provided ID as 'ENABLED'."
      }
    },
    "/api/common/countries": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Generic query string for (a part of) name, email etc.",
            "in": "query",
            "name": "queryString",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiCountry_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "common-controller"
        ],
        "operationId": "getCountriesUsingGET",
        "summary": "List countries"
      }
    },
    "/api/common/document": {
      "post": {
        "parameters": [
          {
            "description": "type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "default": "GENERAL",
              "enum": [
                "GENERAL",
                "IMAGE"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiDocument_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "common-controller"
        ],
        "operationId": "uploadDocumentUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/uploadDocumentUsingPOST"
        },
        "summary": "Uploads a document"
      }
    },
    "/api/common/document/{storageKey}": {
      "get": {
        "parameters": [
          {
            "description": "storageKey",
            "in": "path",
            "name": "storageKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "common-controller"
        ],
        "operationId": "getDocumentUsingGET",
        "summary": "Returns file contents for given storage key"
      }
    },
    "/api/common/globalSettings/{name}": {
      "get": {
        "parameters": [
          {
            "description": "name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiGlobalSettingsValue_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "common-controller"
        ],
        "operationId": "getGlobalSettingsUsingGET",
        "summary": "Returns 'global settings' value"
      },
      "post": {
        "parameters": [
          {
            "description": "name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "common-controller"
        ],
        "operationId": "updateGlobalSettingsUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGlobalSettingsValue"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Updates or creates 'global settings'"
      }
    },
    "/api/common/image": {
      "post": {
        "parameters": [
          {
            "description": "resize",
            "in": "query",
            "name": "resize",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiDocument_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "common-controller"
        ],
        "operationId": "uploadImageUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/uploadDocumentUsingPOST"
        },
        "summary": "Uploads an image"
      }
    },
    "/api/common/image/{storageKey}": {
      "get": {
        "parameters": [
          {
            "description": "storageKey",
            "in": "path",
            "name": "storageKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "common-controller"
        ],
        "operationId": "getImageUsingGET",
        "summary": "Returns image contents for given storage key"
      }
    },
    "/api/common/image/{storageKey}/{size}": {
      "get": {
        "parameters": [
          {
            "description": "storageKey",
            "in": "path",
            "name": "storageKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "size",
            "in": "path",
            "name": "size",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "common-controller"
        ],
        "operationId": "getResizedImageUsingGET",
        "summary": "Returns image contents for given storage key"
      }
    },
    "/api/company/admin/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Language",
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company status, sortable",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "REGISTERED",
                "ACTIVE",
                "DEACTIVATED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company name (start of name), sortable",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiCompanyListResponse_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "listCompaniesAdminUsingGET",
        "summary": "Lists all companies. Must be admin. Sorting: name or default"
      }
    },
    "/api/company/associations/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiCompanyListResponse_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "getAssociationsUsingGET",
        "summary": "Get list of associations for the selected company with given ID"
      }
    },
    "/api/company/companyCustomers": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiCompanyCustomer_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "createCompanyCustomerUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiCompanyCustomer"
        },
        "summary": "Create company customer"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiCompanyCustomer_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "updateCompanyCustomerUsingPUT",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiCompanyCustomer"
        },
        "summary": "Update company customer"
      }
    },
    "/api/company/companyCustomers/list/{companyId}": {
      "get": {
        "parameters": [
          {
            "description": "Company id",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Name",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Phone number",
            "in": "query",
            "name": "phone",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiCompanyCustomer_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "getCompanyCustomersListUsingGET",
        "summary": "List company customers for company"
      }
    },
    "/api/company/companyCustomers/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Company customer ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "deleteCompanyCustomerUsingDELETE",
        "summary": "Delete company customer with ID"
      },
      "get": {
        "parameters": [
          {
            "description": "Company customer ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiCompanyCustomer_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "getCompanyCustomerUsingGET",
        "summary": "Get company customer by ID"
      }
    },
    "/api/company/create": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "createCompanyUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCompany"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Create a new company (with the logged-in user as company admin)"
      }
    },
    "/api/company/execute/{action}": {
      "post": {
        "parameters": [
          {
            "description": "action",
            "in": "path",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "VIEW_COMPANY_PROFILE",
                "UPDATE_COMPANY_PROFILE",
                "ACTIVATE_COMPANY",
                "DEACTIVATE_COMPANY",
                "ADD_USER_TO_COMPANY",
                "SET_USER_COMPANY_ROLE",
                "REMOVE_USER_FROM_COMPANY",
                "MERGE_TO_COMPANY"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "executeActionUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCompanyActionRequest"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Execute company action. Must be an administrator"
      }
    },
    "/api/company/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Language",
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company status, sortable",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "REGISTERED",
                "ACTIVE",
                "DEACTIVATED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company name (start of name), sortable",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiCompanyListResponse_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "listCompaniesUsingGET",
        "summary": "Lists all companies for the logged-in user. Sorting: name or default"
      }
    },
    "/api/company/profile": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "updateCompanyUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCompanyUpdate"
              }
            }
          },
          "description": "company",
          "required": true
        },
        "summary": "Update company data"
      }
    },
    "/api/company/profile/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Record id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiCompanyGet_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "getCompanyUsingGET",
        "summary": "Get all info about a company"
      }
    },
    "/api/company/profile/{id}/users": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_List_ApiCompanyUser_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "getCompanyUsersUsingGET",
        "summary": "Get all user for the company with the provided ID"
      }
    },
    "/api/company/userCustomers/add/{companyId}": {
      "post": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiUserCustomer_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "addUserCustomerUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserCustomer"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Add new user customer for given company ID"
      }
    },
    "/api/company/userCustomers/edit": {
      "put": {
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiUserCustomer_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "updateUserCustomerUsingPUT",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiUserCustomer"
        },
        "summary": "Update user customer with given ID"
      }
    },
    "/api/company/userCustomers/import/farmers/{companyId}/{documentId}": {
      "post": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Document ID",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserCustomerImportResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "importFarmersSpreadsheetUsingPOST",
        "summary": "Upload .xls or .xlsx spreadsheet of farmers to import into DB"
      }
    },
    "/api/company/userCustomers/{companyId}/{type}": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Type of user customer (collector, farmer)",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "COLLECTOR",
                "FARMER"
              ],
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Name or surname",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search by parameter",
            "in": "query",
            "name": "searchBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiUserCustomer_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "getUserCustomersForCompanyAndTypeUsingGET",
        "summary": "Get list of user customers for given company ID and type"
      }
    },
    "/api/company/userCustomers/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "User customer ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "deleteUserCustomerUsingDELETE",
        "summary": "Delete user customer with given id"
      },
      "get": {
        "parameters": [
          {
            "description": "User customer ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiUserCustomer_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "getUserCustomerUsingGET",
        "summary": "Get user customer by id"
      }
    },
    "/api/company/{id}/connected-companies": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiCompanyListResponse_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "getConnectedCompaniesUsingGET",
        "summary": "Get list of connected companies for the company with the given ID"
      }
    },
    "/api/company/{id}/product-types": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProductType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "getCompanyProductTypesUsingGET",
        "summary": "Get list of product types for the company with the given ID"
      }
    },
    "/api/company/{id}/value-chains": {
      "get": {
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiValueChain_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "company-controller"
        ],
        "operationId": "getCompanyValueChainsUsingGET",
        "summary": "Get list of value chains for the company with the given ID"
      }
    },
    "/api/final-product/company/{companyId}": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Company ID",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiFinalProduct_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "final-product-controller"
        ],
        "operationId": "getFinalProductsForCompanyUsingGET",
        "summary": "Get a list of final products that the company with the provided ID has access to"
      }
    },
    "/api/product-type": {
      "get": {
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProductType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-type-controller"
        ],
        "operationId": "getProductTypesUsingGET",
        "summary": "Get a list of product types"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-type-controller"
        ],
        "operationId": "createProductTypeUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiProductType"
        },
        "summary": "Create a new product type"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-type-controller"
        ],
        "operationId": "updateProductTypeUsingPUT",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiProductType"
        },
        "summary": "Update a product type"
      }
    },
    "/api/product-type/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "id",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-type-controller"
        ],
        "operationId": "deleteProductTypeUsingDELETE",
        "summary": "Delete a product type"
      },
      "get": {
        "parameters": [
          {
            "description": "id",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProductType_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-type-controller"
        ],
        "operationId": "getProductTypeUsingGET",
        "summary": "Get product type details"
      }
    },
    "/api/product/": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "updateProductUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProduct"
              }
            }
          },
          "description": "product",
          "required": true
        },
        "summary": "Update product data"
      }
    },
    "/api/product/admin/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Product name (start of name)",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProductListResponse_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "listProductsAdminUsingGET",
        "summary": "Lists all products. Must be admin. Sorting: name or default"
      }
    },
    "/api/product/create": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "createProductUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProduct"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Create a new product"
      }
    },
    "/api/product/knowledgeBlog": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductKnowledgeBlogUsingPUT",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiKnowledgeBlog"
        },
        "summary": "Update knowledge blog"
      }
    },
    "/api/product/knowledgeBlog/list/{productId}": {
      "get": {
        "parameters": [
          {
            "description": "Product id",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "knowledge blog type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "FAIRNESS",
                "QUALITY",
                "PROVENANCE"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiKnowledgeBlogBase_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductKnowledgeBlogUsingGET",
        "summary": "Get knowledge blogs for a product"
      }
    },
    "/api/product/knowledgeBlog/{id}": {
      "get": {
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiKnowledgeBlog_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductKnowledgeBlog",
        "summary": "Get knowledge blog by id"
      }
    },
    "/api/product/knowledgeBlog/{productId}": {
      "post": {
        "parameters": [
          {
            "description": "type",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductKnowledgeBlogUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKnowledgeBlog"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Add knowledge blog to a product"
      }
    },
    "/api/product/label": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "updateProductLabelUsingPUT",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiProductLabel"
        },
        "summary": "Update label data"
      }
    },
    "/api/product/label/analytics/{uid}": {
      "get": {
        "parameters": [
          {
            "description": "Label uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProductLabelAnalytics_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductLabelAnalyticsUsingGET",
        "summary": "Get label data"
      }
    },
    "/api/product/label/content": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "updateProductLabelContentUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductLabelContent"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Update label content"
      }
    },
    "/api/product/label/content/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Label id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProductLabelContent_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductLabelContentUsingGET",
        "summary": "Get label content"
      }
    },
    "/api/product/label/create": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "createProductLabelUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiProductLabel"
        },
        "summary": "Create a new product label"
      }
    },
    "/api/product/label/execute/{action}": {
      "post": {
        "parameters": [
          {
            "description": "action",
            "in": "path",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "PUBLISH_LABEL",
                "UNPUBLISH_LABEL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "executeAction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiBaseEntity"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Execute action"
      }
    },
    "/api/product/label/feedback/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Feedback id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "deleteProductLabelFeedbackUsingDELETE",
        "summary": "Deletes a product label feedback"
      }
    },
    "/api/product/label/values": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "updateProductLabelValuesUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductLabelUpdateValues"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Update field values"
      }
    },
    "/api/product/label/values/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Record id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProductLabelValues_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductLabelValuesUsingGET",
        "summary": "Get label with field values"
      }
    },
    "/api/product/label/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Label id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "deleteProductLabelUsingDELETE",
        "summary": "Deletes a product label"
      },
      "get": {
        "parameters": [
          {
            "description": "Record id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProductLabel_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductLabelUsingGET",
        "summary": "Get label data"
      }
    },
    "/api/product/label/{id}/batches": {
      "get": {
        "parameters": [
          {
            "description": "Label id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Batch number (start of it)",
            "in": "query",
            "name": "number",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProductLabelBatch_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductLabelBatchesUsingGET",
        "summary": "Get label batches for specified label. Sorting: number or productionDate, expiryDate"
      }
    },
    "/api/product/label/{id}/documents": {
      "get": {
        "parameters": [
          {
            "description": "Label id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_List_ApiProductLabelCompanyDocument_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getCompanyDocumentsForProductLabelUsingGET",
        "summary": "Get selected company documents for product label"
      },
      "put": {
        "parameters": [
          {
            "description": "Label ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "updateCompanyDocumentsForProductLabelUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ApiProductLabelCompanyDocument"
                },
                "type": "array"
              }
            }
          },
          "description": "Company document list",
          "required": true
        },
        "summary": "Update company document product label list"
      }
    },
    "/api/product/label/{id}/instructions": {
      "get": {
        "parameters": [
          {
            "description": "Label id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductLabelInstructionsUsingGET",
        "summary": "getProductLabelInstructions"
      }
    },
    "/api/product/label_batch": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "updateProductLabelBatchUsingPUT",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiProductLabelBatch"
        },
        "summary": "Update label batch data"
      }
    },
    "/api/product/label_batch/create": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "createProductLabelBatchUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiProductLabelBatch"
        },
        "summary": "Create a new product label batch"
      }
    },
    "/api/product/label_batch/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Batch id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "deleteProductLabelBatchUsingDELETE",
        "summary": "Deletes a product label batch"
      },
      "get": {
        "parameters": [
          {
            "description": "Batch id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProductLabelBatch_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductLabelBatchUsingGET",
        "summary": "Get label batch data"
      }
    },
    "/api/product/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Product name (start of name)",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProductListResponse_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "listProductsUsingGET",
        "summary": "Lists all products. Sorting: name or default"
      }
    },
    "/api/product/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Product id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "deleteProductUsingDELETE",
        "summary": "Deletes a product"
      },
      "get": {
        "parameters": [
          {
            "description": "Product id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "includeLabels",
            "in": "query",
            "name": "includeLabels",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProduct_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductUsingGET",
        "summary": "Get all info about a product"
      }
    },
    "/api/product/{id}/labels": {
      "get": {
        "parameters": [
          {
            "description": "Product id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_List_ApiProductLabelBase_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getProductLabelsUsingGET",
        "summary": "Get labels for product"
      }
    },
    "/api/product/{productId}/finalProduct": {
      "put": {
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiBaseEntity_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "createOrUpdateFinalProductUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiFinalProduct"
              }
            }
          },
          "description": "apiFinalProduct",
          "required": true
        },
        "summary": "Create or update final product."
      }
    },
    "/api/product/{productId}/finalProduct/list": {
      "get": {
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiFinalProduct_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getFinalProductListUsingGET",
        "summary": "Get final product list by product ID."
      }
    },
    "/api/product/{productId}/finalProduct/{finalProductId}": {
      "delete": {
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Final product ID",
            "in": "path",
            "name": "finalProductId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "deleteFinalProductUsingDELETE",
        "summary": "Delete a final product"
      },
      "get": {
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Final product ID",
            "in": "path",
            "name": "finalProductId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiFinalProduct_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getFinalProductUsingGET",
        "summary": "Get final product by ID."
      }
    },
    "/api/product/{productId}/finalProduct/{finalProductId}/labels": {
      "get": {
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Final product ID",
            "in": "path",
            "name": "finalProductId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Also return the unpublished labels",
            "in": "query",
            "name": "returnUnpublished",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_List_ApiProductLabelBase_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "product-controller"
        ],
        "operationId": "getFinalProductLabelsUsingGET",
        "summary": "Get final product labels."
      }
    },
    "/api/public/document/{storageKey}": {
      "get": {
        "parameters": [
          {
            "description": "storageKey",
            "in": "path",
            "name": "storageKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "getPublicDocumentUsingGET",
        "summary": "Returns file contents for given storage key"
      }
    },
    "/api/public/globalSettings/{name}": {
      "get": {
        "parameters": [
          {
            "description": "name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiGlobalSettingsValue_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "getPublicGlobalSettingsUsingGET",
        "summary": "Returns 'global settings' value"
      }
    },
    "/api/public/image/{storageKey}": {
      "get": {
        "parameters": [
          {
            "description": "storageKey",
            "in": "path",
            "name": "storageKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "getPublicImageUsingGET",
        "summary": "Returns image contents for given storage key"
      }
    },
    "/api/public/image/{storageKey}/{size}": {
      "get": {
        "parameters": [
          {
            "description": "storageKey",
            "in": "path",
            "name": "storageKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "size",
            "in": "path",
            "name": "size",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "getPublicResizedImageUsingGET",
        "summary": "Returns image contents for given storage key"
      }
    },
    "/api/public/logRequest": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "logPublicRequestUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLogRequest"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Write data to request log for analytics"
      }
    },
    "/api/public/product/knowledgeBlog/{id}": {
      "get": {
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiKnowledgeBlog_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "getPublicProductKnowledgeBlogUsingGET",
        "summary": "Get knowledge blog by id"
      }
    },
    "/api/public/product/label/feedback/list/{labelUid}": {
      "get": {
        "parameters": [
          {
            "description": "Label id",
            "in": "path",
            "name": "labelUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "feedback type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "PRAISE",
                "PROPOSAL",
                "COMPLAINT"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiProductLabelFeedback_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "listProductLabelFeedbacksUsingGET",
        "summary": "List feedback for a label uid"
      }
    },
    "/api/public/product/label/feedback/{labelUid}": {
      "post": {
        "parameters": [
          {
            "description": "Label id",
            "in": "path",
            "name": "labelUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "addProductLabelFeedbackUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductLabelFeedback"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Add a feedback to a label with a label uid"
      }
    },
    "/api/public/product/label/{uid}": {
      "get": {
        "parameters": [
          {
            "description": "Label uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProductLabelValuesExtended_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "getPublicProductLabelValuesUsingGET",
        "summary": "Get label with field values"
      }
    },
    "/api/public/product/label/{uid}/verify_batch_authenticity": {
      "get": {
        "parameters": [
          {
            "description": "Label uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity id",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Batch number",
            "in": "query",
            "name": "number",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Production date",
            "in": "query",
            "name": "productionDate",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Expiry date",
            "in": "query",
            "name": "expiryDate",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_boolean_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "checkPublicProductLabelBatchAuthenticityUsingGET",
        "summary": "Check batch by number and given date(s)"
      }
    },
    "/api/public/product/label/{uid}/verify_batch_origin": {
      "get": {
        "parameters": [
          {
            "description": "Label uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity id",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Batch number",
            "in": "query",
            "name": "number",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_List_ApiLocation_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "checkPublicProductLabelBatchOriginUsingGET",
        "summary": "Get batch by label and number"
      }
    },
    "/api/public/product/label_batch/{uid}/{number}": {
      "get": {
        "parameters": [
          {
            "description": "Label uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Batch number",
            "in": "path",
            "name": "number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiProductLabelBatch_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "getPublicProductLabelBatchUsingGET",
        "summary": "Get batch by label and number"
      }
    },
    "/api/public/stock-order/{qrTag}": {
      "get": {
        "parameters": [
          {
            "description": "QR code tag",
            "in": "path",
            "name": "qrTag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return aggregated history",
            "in": "query",
            "name": "withHistory",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "language",
            "required": false,
            "schema": {
              "default": "EN",
              "enum": [
                "EN",
                "DE",
                "RW",
                "ES"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiQRTagPublic_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "public-controller"
        ],
        "operationId": "getQRTagPublicDataUsingGET",
        "summary": "Get public data for the Stock order with the given QR code tag"
      }
    },
    "/api/user/admin/execute/{action}": {
      "post": {
        "parameters": [
          {
            "description": "action",
            "in": "path",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "VIEW_USER_PROFILE",
                "CREATE_COMPANY",
                "UPDATE_USER_PROFILE",
                "ACTIVATE_USER",
                "CONFIRM_USER_EMAIL",
                "DEACTIVATE_USER",
                "SET_USER_ADMIN",
                "UNSET_USER_ADMIN",
                "SET_USER_ROLE"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "activateUserUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserRole"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Execute user (status, role) action. Must be an administrator"
      }
    },
    "/api/user/admin/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Status",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "UNCONFIRMED",
                "CONFIRMED_EMAIL",
                "ACTIVE",
                "DEACTIVATED"
              ],
              "type": "string"
            }
          },
          {
            "description": "User role",
            "in": "query",
            "name": "role",
            "required": false,
            "schema": {
              "enum": [
                "USER",
                "ADMIN",
                "MANAGER",
                "ACCOUNTANT"
              ],
              "type": "string"
            }
          },
          {
            "description": "Email",
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Surname",
            "in": "query",
            "name": "surname",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name, surname or email",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiUserBase_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "adminListUsersUsingGET",
        "summary": "Lists all users. Must be an administrator. Sorting: email, surname or default"
      }
    },
    "/api/user/admin/profile": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "adminUpdateProfileUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAdminUserUpdate"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Update profile of a user. Must be admin"
      }
    },
    "/api/user/admin/profile/{id}": {
      "get": {
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiUser_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "getProfileForAdminUsingGET",
        "summary": "Get profile of a user. Must be an administrator"
      }
    },
    "/api/user/confirm_email": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "confirmEmailUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiToken"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Confirms email with a token and logs-in the user"
      }
    },
    "/api/user/list": {
      "get": {
        "parameters": [
          {
            "description": "Only count, only fetch, or return both values (if null)",
            "in": "query",
            "name": "requestType",
            "required": false,
            "schema": {
              "enum": [
                "COUNT",
                "FETCH"
              ],
              "type": "string"
            }
          },
          {
            "description": "Number of records to return. Min: 1, default: 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of records to skip before returning. Default: 0, min: 0",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Column name to be sorted by, varies for each endpoint, default is id",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction of sorting (ASC or DESC). Default DESC.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "Status",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "UNCONFIRMED",
                "CONFIRMED_EMAIL",
                "ACTIVE",
                "DEACTIVATED"
              ],
              "type": "string"
            }
          },
          {
            "description": "User role",
            "in": "query",
            "name": "role",
            "required": false,
            "schema": {
              "enum": [
                "USER",
                "ADMIN",
                "MANAGER",
                "ACCOUNTANT"
              ],
              "type": "string"
            }
          },
          {
            "description": "Email",
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Surname",
            "in": "query",
            "name": "surname",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name, surname or email",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResponse_ApiUserBase_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "listUsersUsingGET",
        "summary": "Lists all users in the logged-in user's companies"
      }
    },
    "/api/user/login": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "loginUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLoginRequest"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Logs in a user"
      }
    },
    "/api/user/logout": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "logoutUsingPOST",
        "summary": "Logs out a user"
      }
    },
    "/api/user/profile": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_ApiUserGet_"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "getProfileForUserUsingGET",
        "summary": "Get profile of the currently loged-in user"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "updateProfileUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserUpdate"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Update profile of the currently logged in user"
      }
    },
    "/api/user/refresh_authentication": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "refreshAuthenticationUsingPOST",
        "summary": "Refresh access token"
      }
    },
    "/api/user/register": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "createUserUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCreateUserRequest"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Create a new user (not activated)"
      }
    },
    "/api/user/request_reset_password": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "requestResetPasswordUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiEmail"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Request reset password (sends mail with reset link)"
      }
    },
    "/api/user/reset_password": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefaultResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "user-controller"
        ],
        "operationId": "resetPasswordUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiResetPasswordRequest"
              }
            }
          },
          "description": "request",
          "required": true
        },
        "summary": "Reset password using token and new password"
      }
    },
    "/error": {
      "delete": {
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ModelAndView"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "basic-error-controller"
        ],
        "operationId": "errorHtmlUsingDELETE",
        "summary": "errorHtml"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ModelAndView"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "basic-error-controller"
        ],
        "operationId": "errorHtmlUsingGET",
        "summary": "errorHtml"
      },
      "head": {
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ModelAndView"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "basic-error-controller"
        ],
        "operationId": "errorHtmlUsingHEAD",
        "summary": "errorHtml"
      },
      "options": {
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ModelAndView"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "basic-error-controller"
        ],
        "operationId": "errorHtmlUsingOPTIONS",
        "summary": "errorHtml"
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ModelAndView"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "basic-error-controller"
        ],
        "operationId": "errorHtmlUsingPATCH",
        "summary": "errorHtml"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ModelAndView"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "basic-error-controller"
        ],
        "operationId": "errorHtmlUsingPOST",
        "summary": "errorHtml"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ModelAndView"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "basic-error-controller"
        ],
        "operationId": "errorHtmlUsingPUT",
        "summary": "errorHtml"
      }
    }
  },
  "components": {
    "requestBodies": {
      "ApiCompanyCustomer": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiCompanyCustomer"
            }
          }
        },
        "description": "apiCompanyCustomer",
        "required": true
      },
      "ApiKnowledgeBlog": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiKnowledgeBlog"
            }
          }
        },
        "description": "request",
        "required": true
      },
      "ApiProductLabel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiProductLabel"
            }
          }
        },
        "description": "request",
        "required": true
      },
      "ApiProductLabelBatch": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiProductLabelBatch"
            }
          }
        },
        "description": "request",
        "required": true
      },
      "ApiProductType": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiProductType"
            }
          }
        },
        "description": "apiProductType",
        "required": true
      },
      "ApiUserCustomer": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiUserCustomer"
            }
          }
        },
        "description": "request",
        "required": true
      },
      "uploadDocumentUsingPOST": {
        "content": {
          "application/octet-stream": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "ApiActionType": {
        "properties": {
          "code": {
            "description": "code",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "label": {
            "description": "label",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiActivityProof": {
        "properties": {
          "document": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "The attached document reference of the activity proof"
          },
          "formalCreationDate": {
            "description": "The formal creation date of the document",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "description": "The type of the activity proof",
            "type": "string"
          },
          "validUntil": {
            "description": "Date until the document is valid",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiAddress": {
        "properties": {
          "address": {
            "description": "address",
            "type": "string"
          },
          "cell": {
            "description": "Village cell",
            "type": "string"
          },
          "city": {
            "description": "city",
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/ApiCountry",
            "description": "country"
          },
          "hondurasDepartment": {
            "description": "Honduras department name",
            "type": "string"
          },
          "hondurasFarm": {
            "description": "Honduras farm name",
            "type": "string"
          },
          "hondurasMunicipality": {
            "description": "Honduras municipality name",
            "type": "string"
          },
          "hondurasVillage": {
            "description": "Honduras village name",
            "type": "string"
          },
          "sector": {
            "description": "Village sector",
            "type": "string"
          },
          "state": {
            "description": "state / province / region",
            "type": "string"
          },
          "village": {
            "description": "Village name",
            "type": "string"
          },
          "zip": {
            "description": "ZIP / postal code / p.p. box",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiAdminUserUpdate": {
        "properties": {
          "id": {
            "description": "Name",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "surname": {
            "description": "Surname",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBankInformation": {
        "properties": {
          "accountHolderName": {
            "description": "Account holder name",
            "type": "string"
          },
          "accountNumber": {
            "description": "Account number",
            "type": "string"
          },
          "additionalInformation": {
            "description": "Additional information",
            "type": "string"
          },
          "bankName": {
            "description": "Bank name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBaseEntity": {
        "properties": {
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiBeycoCoffee": {
        "properties": {
          "additionalQualityDescriptors": {
            "description": "Additional grade, if selected 'Other' in grades",
            "type": "string"
          },
          "certificates": {
            "description": "Certificates of coffee beans",
            "items": {
              "$ref": "#/components/schemas/ApiBeycoCoffeeCertificate"
            },
            "type": "array"
          },
          "country": {
            "description": "Country of coffee beans",
            "type": "string"
          },
          "cuppingScore": {
            "description": "Cupping score",
            "format": "int32",
            "type": "integer"
          },
          "grades": {
            "description": "Grades of coffee beans",
            "items": {
              "$ref": "#/components/schemas/ApiBeycoCoffeeGrade"
            },
            "type": "array"
          },
          "harvestAt": {
            "description": "Harvest date",
            "format": "date-time",
            "type": "string"
          },
          "isBulk": {
            "description": "Is bulk",
            "example": false,
            "type": "boolean"
          },
          "maxScreenSize": {
            "description": "Maximum screen size",
            "format": "int32",
            "type": "integer"
          },
          "minScreenSize": {
            "description": "Minimal screen size",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Internal LOT number or name of coffee",
            "type": "string"
          },
          "process": {
            "description": "Coffee process",
            "enum": [
              "FullyWashed",
              "SemiWashedHoney",
              "Natural",
              "Other"
            ],
            "type": "string"
          },
          "qualitySegments": {
            "description": "Quality of coffee beans",
            "items": {
              "$ref": "#/components/schemas/ApiBeycoCoffeeQuality"
            },
            "type": "array"
          },
          "quantity": {
            "description": "Quantity of beans",
            "type": "number"
          },
          "region": {
            "description": "Region of coffee beans",
            "type": "string"
          },
          "species": {
            "description": "Coffee species",
            "enum": [
              "Arabica",
              "Robusta"
            ],
            "type": "string"
          },
          "unit": {
            "description": "Unit of order",
            "enum": [
              "Kg",
              "Mg",
              "Bag25",
              "Bag30",
              "Bag35",
              "Bag46",
              "Bag50",
              "Bag59",
              "Bag60",
              "Bag69",
              "Bag70",
              "Bag1000"
            ],
            "type": "string"
          },
          "varieties": {
            "description": "Varieties of coffee beans",
            "items": {
              "$ref": "#/components/schemas/ApiBeycoCoffeeVariety"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiBeycoCoffeeCertificate": {
        "properties": {
          "type": {
            "description": "Certificate of coffee beans",
            "enum": [
              "Ra",
              "Fairtrade",
              "Organic",
              "Practices",
              "FourC"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBeycoCoffeeGrade": {
        "properties": {
          "type": {
            "description": "Grade of coffee beans",
            "enum": [
              "Na",
              "Grade1",
              "Grade2",
              "Grade3",
              "Grade4",
              "Grade5",
              "Aa",
              "A",
              "Ab",
              "B",
              "C",
              "Pb",
              "X",
              "E",
              "Psc",
              "Y1",
              "Y2",
              "T",
              "HgHb",
              "ShgShb",
              "Other"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBeycoCoffeeQuality": {
        "properties": {
          "type": {
            "description": "Quality of coffee beans",
            "enum": [
              "Specialty",
              "CommodityConventional",
              "LowGrade"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBeycoCoffeeVariety": {
        "properties": {
          "customVariety": {
            "description": "Optional custom variety of coffee beans",
            "type": "string"
          },
          "type": {
            "description": "Variety of coffee beans",
            "enum": [
              "Bourbon",
              "Castillo",
              "Catimor",
              "Catuai",
              "Caturra",
              "Geisha",
              "Heirloom",
              "Ih90",
              "Jackson",
              "Java",
              "Lempira",
              "MundoNovo",
              "Sl14",
              "Sl28",
              "Sl34",
              "Typica",
              "Other"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBeycoOrderCoffees": {
        "properties": {
          "coffee": {
            "$ref": "#/components/schemas/ApiBeycoCoffee",
            "description": "Coffee description fields"
          },
          "currency": {
            "description": "Used currency",
            "enum": [
              "Usd",
              "UsdCt",
              "Eur"
            ],
            "type": "string"
          },
          "customIncoterms": {
            "description": "Custom incoterms",
            "type": "string"
          },
          "incoterms": {
            "description": "Incoterms",
            "enum": [
              "Tbd",
              "Fob",
              "Fot",
              "Fca",
              "Fas",
              "Exw",
              "Cfr",
              "Cif",
              "Cpt",
              "Cip",
              "Dap",
              "Dpu",
              "Ddp",
              "Other"
            ],
            "type": "string"
          },
          "isFixedPrice": {
            "description": "Is fixed price",
            "example": false,
            "type": "boolean"
          },
          "price": {
            "description": "Price of order",
            "type": "number"
          },
          "priceUnit": {
            "description": "Price unit",
            "enum": [
              "Mg",
              "Lb",
              "Kg"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBeycoOrderFields": {
        "properties": {
          "availableAt": {
            "description": "When order is available",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "offerCoffees": {
            "description": "Array of coffee orders",
            "items": {
              "$ref": "#/components/schemas/ApiBeycoOrderCoffees"
            },
            "type": "array"
          },
          "portOfExport": {
            "$ref": "#/components/schemas/ApiBeycoPortOfExport",
            "description": "Location of export"
          },
          "privacy": {
            "description": "Privacy of order",
            "enum": [
              "Public",
              "Users",
              "Connections",
              "List",
              "Private",
              "All"
            ],
            "type": "string"
          },
          "title": {
            "description": "Title of Beyco coffee order",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBeycoPortOfExport": {
        "properties": {
          "address": {
            "description": "Address of facility",
            "type": "string"
          },
          "country": {
            "description": "Country of facility",
            "type": "string"
          },
          "latitude": {
            "description": "Latitude of facility",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude of facility",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiBeycoTokenResponse": {
        "properties": {
          "accessToken": {
            "description": "JWT token for authentication",
            "type": "string"
          },
          "expiresIn": {
            "description": "Remaining time of token's life",
            "format": "int64",
            "type": "integer"
          },
          "refreshToken": {
            "description": "Refresh token",
            "type": "string"
          },
          "scope": {
            "description": "Scope of the token",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tokenType": {
            "description": "Type of token",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBulkPayment": {
        "properties": {
          "additionalCost": {
            "description": "Bulk payment additional cost",
            "type": "number"
          },
          "additionalCostDescription": {
            "description": "Bulk payment additional cost description",
            "type": "string"
          },
          "additionalProofs": {
            "description": "Bulk payment additional proofs",
            "items": {
              "$ref": "#/components/schemas/ApiActivityProof"
            },
            "type": "array"
          },
          "createdBy": {
            "$ref": "#/components/schemas/ApiUser",
            "description": "Bulk payment created by"
          },
          "creationTimestamp": {
            "description": "Creation timestamp",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "Bulk payment currency",
            "type": "string"
          },
          "formalCreationTime": {
            "description": "Formal creation date",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "payingCompany": {
            "$ref": "#/components/schemas/ApiCompany",
            "description": "Company that pays for the bulk payment"
          },
          "paymentDescription": {
            "description": "Bulk payment drescription",
            "type": "string"
          },
          "paymentPurposeType": {
            "description": "Bulk payment purpose type",
            "enum": [
              "ADVANCE_PAYMENT",
              "FIRST_INSTALLMENT",
              "SECOND_INSTALLMENT",
              "WOMEN_PREMIUM",
              "INVOICE_PAYMENT"
            ],
            "type": "string"
          },
          "payments": {
            "description": "Bulk payment payments",
            "items": {
              "$ref": "#/components/schemas/ApiPayment"
            },
            "type": "array"
          },
          "receiptNumber": {
            "description": "Bulk payment receipt number",
            "type": "string"
          },
          "totalAmount": {
            "description": "Bulk payment total amount",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiBusinessToCustomerSettings": {
        "properties": {
          "averageRegionFarmGatePrice": {
            "type": "number"
          },
          "containerSize": {
            "type": "number"
          },
          "creationTimestamp": {
            "format": "date-time",
            "type": "string"
          },
          "fairTrade": {
            "type": "number"
          },
          "graphicFairPrices": {
            "type": "boolean"
          },
          "graphicFarmGatePrice": {
            "enum": [
              "DISABLED",
              "PER_CONTAINER",
              "PER_KG",
              "PERCENT_VALUE"
            ],
            "type": "string"
          },
          "graphicIncreaseOfIncome": {
            "type": "boolean"
          },
          "graphicPriceToProducer": {
            "enum": [
              "DISABLED",
              "PER_CONTAINER",
              "PER_KG",
              "PERCENT_VALUE"
            ],
            "type": "string"
          },
          "graphicQuality": {
            "type": "boolean"
          },
          "headerBackgroundImage": {
            "$ref": "#/components/schemas/ApiDocument"
          },
          "headingColor": {
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "landingPageBackgroundImage": {
            "$ref": "#/components/schemas/ApiDocument"
          },
          "landingPageImage": {
            "$ref": "#/components/schemas/ApiDocument"
          },
          "manualFarmGatePrice": {
            "type": "number"
          },
          "manualProducerPrice": {
            "type": "number"
          },
          "orderFairPrices": {
            "format": "int64",
            "type": "integer"
          },
          "orderFeedback": {
            "format": "int64",
            "type": "integer"
          },
          "orderProducers": {
            "format": "int64",
            "type": "integer"
          },
          "orderQuality": {
            "format": "int64",
            "type": "integer"
          },
          "primaryColor": {
            "type": "string"
          },
          "productFont": {
            "$ref": "#/components/schemas/ApiDocument"
          },
          "productTitleColor": {
            "type": "string"
          },
          "quaternaryColor": {
            "type": "string"
          },
          "secondaryColor": {
            "type": "string"
          },
          "tabFairPrices": {
            "type": "boolean"
          },
          "tabFeedback": {
            "type": "boolean"
          },
          "tabProducers": {
            "type": "boolean"
          },
          "tabQuality": {
            "type": "boolean"
          },
          "tertiaryColor": {
            "type": "string"
          },
          "textColor": {
            "type": "string"
          },
          "textFont": {
            "$ref": "#/components/schemas/ApiDocument"
          },
          "updateTimestamp": {
            "format": "date-time",
            "type": "string"
          },
          "worldMarket": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiCertification": {
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "certificate for this standard"
          },
          "description": {
            "description": "description of this standard and certification",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "description": "certification type",
            "type": "string"
          },
          "validity": {
            "description": "validity",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCompany": {
        "properties": {
          "abbreviation": {
            "description": "company abbreviation",
            "type": "string"
          },
          "about": {
            "description": "about the company",
            "type": "string"
          },
          "allowBeycoIntegration": {
            "description": "Is company allowed to export orders to Beyco platform",
            "example": false,
            "type": "boolean"
          },
          "certifications": {
            "description": "company certifications",
            "items": {
              "$ref": "#/components/schemas/ApiCertification"
            },
            "type": "array"
          },
          "currency": {
            "$ref": "#/components/schemas/ApiCurrencyType",
            "description": "Preferred currency of the company"
          },
          "displayPrefferedWayOfPayment": {
            "description": "Display preferred way of payment on purchase order form",
            "example": false,
            "type": "boolean"
          },
          "documents": {
            "description": "company documents",
            "items": {
              "$ref": "#/components/schemas/ApiCompanyDocument"
            },
            "type": "array"
          },
          "email": {
            "description": "email",
            "type": "string"
          },
          "headquarters": {
            "$ref": "#/components/schemas/ApiAddress",
            "description": "headquarters"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "interview": {
            "description": "interview",
            "type": "string"
          },
          "logo": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "high-resolution logo of the company (jpeg, jpg, png)"
          },
          "manager": {
            "description": "name of manager / CEO",
            "type": "string"
          },
          "mediaLinks": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "social media URL links (Facebook, Instagram, Twitter, YouTube, ...)",
            "type": "object"
          },
          "name": {
            "description": "company name",
            "type": "string"
          },
          "phone": {
            "description": "webpage",
            "type": "string"
          },
          "purchaseProofDocumentMultipleFarmers": {
            "description": "Enable adding multiple farmers for one proof document on purchase order form",
            "example": false,
            "type": "boolean"
          },
          "valueChains": {
            "description": "company value chains",
            "items": {
              "$ref": "#/components/schemas/ApiValueChain"
            },
            "type": "array"
          },
          "webPage": {
            "description": "webpage",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCompanyActionRequest": {
        "properties": {
          "companyId": {
            "description": "Company id",
            "format": "int64",
            "type": "integer"
          },
          "companyUserRole": {
            "description": "Company user role",
            "enum": [
              "USER",
              "ADMIN",
              "MANAGER",
              "ACCOUNTANT"
            ],
            "type": "string"
          },
          "otherCompanyId": {
            "description": "Other company id",
            "format": "int64",
            "type": "integer"
          },
          "userId": {
            "description": "User id",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiCompanyBase": {
        "properties": {
          "abbreviation": {
            "description": "company abbreviation",
            "type": "string"
          },
          "about": {
            "description": "about the company",
            "type": "string"
          },
          "displayPrefferedWayOfPayment": {
            "description": "Display preferred way of payment on purchase order form",
            "example": false,
            "type": "boolean"
          },
          "email": {
            "description": "email",
            "type": "string"
          },
          "headquarters": {
            "$ref": "#/components/schemas/ApiAddress",
            "description": "headquarters"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "manager": {
            "description": "name of manager / CEO",
            "type": "string"
          },
          "mediaLinks": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "social media URL links (Facebook, Instagram, Twitter, YouTube, ...)",
            "type": "object"
          },
          "name": {
            "description": "company name",
            "type": "string"
          },
          "phone": {
            "description": "webpage",
            "type": "string"
          },
          "purchaseProofDocumentMultipleFarmers": {
            "description": "Enable adding multiple farmers for one proof document on purchase order form",
            "example": false,
            "type": "boolean"
          },
          "webPage": {
            "description": "webpage",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCompanyCustomer": {
        "properties": {
          "companyId": {
            "description": "Company id",
            "format": "int64",
            "type": "integer"
          },
          "contact": {
            "description": "Contact",
            "type": "string"
          },
          "email": {
            "description": "Email",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "location": {
            "$ref": "#/components/schemas/ApiGeoAddress",
            "description": "Location"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "officialCompanyName": {
            "description": "Official company name",
            "type": "string"
          },
          "phone": {
            "description": "Phone",
            "type": "string"
          },
          "vatId": {
            "description": "Vat id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCompanyDocument": {
        "properties": {
          "category": {
            "description": "document category",
            "enum": [
              "VIDEO",
              "PRODUCTION_RECORD",
              "MEET_THE_FARMER"
            ],
            "type": "string"
          },
          "description": {
            "description": "description of this document",
            "type": "string"
          },
          "document": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "document"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "link": {
            "description": "link",
            "type": "string"
          },
          "name": {
            "description": "name",
            "type": "string"
          },
          "quote": {
            "description": "quote of this document",
            "type": "string"
          },
          "type": {
            "description": "type of the document (link, file)",
            "enum": [
              "LINK",
              "FILE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCompanyGet": {
        "properties": {
          "abbreviation": {
            "description": "company abbreviation",
            "type": "string"
          },
          "about": {
            "description": "about the company",
            "type": "string"
          },
          "actions": {
            "description": "Possible actions",
            "items": {
              "enum": [
                "VIEW_COMPANY_PROFILE",
                "UPDATE_COMPANY_PROFILE",
                "ACTIVATE_COMPANY",
                "DEACTIVATE_COMPANY",
                "ADD_USER_TO_COMPANY",
                "SET_USER_COMPANY_ROLE",
                "REMOVE_USER_FROM_COMPANY",
                "MERGE_TO_COMPANY"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "allowBeycoIntegration": {
            "description": "Is company allowed to export orders to Beyco platform",
            "example": false,
            "type": "boolean"
          },
          "certifications": {
            "description": "company certifications",
            "items": {
              "$ref": "#/components/schemas/ApiCertification"
            },
            "type": "array"
          },
          "currency": {
            "$ref": "#/components/schemas/ApiCurrencyType",
            "description": "Preferred currency of the company"
          },
          "displayPrefferedWayOfPayment": {
            "description": "Display preferred way of payment on purchase order form",
            "example": false,
            "type": "boolean"
          },
          "documents": {
            "description": "company documents",
            "items": {
              "$ref": "#/components/schemas/ApiCompanyDocument"
            },
            "type": "array"
          },
          "email": {
            "description": "email",
            "type": "string"
          },
          "headquarters": {
            "$ref": "#/components/schemas/ApiAddress",
            "description": "headquarters"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "interview": {
            "description": "interview",
            "type": "string"
          },
          "logo": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "high-resolution logo of the company (jpeg, jpg, png)"
          },
          "manager": {
            "description": "name of manager / CEO",
            "type": "string"
          },
          "mediaLinks": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "social media URL links (Facebook, Instagram, Twitter, YouTube, ...)",
            "type": "object"
          },
          "name": {
            "description": "company name",
            "type": "string"
          },
          "phone": {
            "description": "webpage",
            "type": "string"
          },
          "purchaseProofDocumentMultipleFarmers": {
            "description": "Enable adding multiple farmers for one proof document on purchase order form",
            "example": false,
            "type": "boolean"
          },
          "users": {
            "description": "Company users",
            "items": {
              "$ref": "#/components/schemas/ApiCompanyUser"
            },
            "type": "array"
          },
          "valueChains": {
            "description": "company value chains",
            "items": {
              "$ref": "#/components/schemas/ApiValueChain"
            },
            "type": "array"
          },
          "webPage": {
            "description": "webpage",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCompanyListResponse": {
        "properties": {
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "logoStorageKey": {
            "description": "storage key (file on system, s3, ...).",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "status": {
            "description": "Company status",
            "enum": [
              "REGISTERED",
              "ACTIVE",
              "DEACTIVATED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCompanyUpdate": {
        "properties": {
          "abbreviation": {
            "description": "company abbreviation",
            "type": "string"
          },
          "about": {
            "description": "about the company",
            "type": "string"
          },
          "allowBeycoIntegration": {
            "description": "Is company allowed to export orders to Beyco platform",
            "example": false,
            "type": "boolean"
          },
          "certifications": {
            "description": "company certifications",
            "items": {
              "$ref": "#/components/schemas/ApiCertification"
            },
            "type": "array"
          },
          "currency": {
            "$ref": "#/components/schemas/ApiCurrencyType",
            "description": "Preferred currency of the company"
          },
          "displayPrefferedWayOfPayment": {
            "description": "Display preferred way of payment on purchase order form",
            "example": false,
            "type": "boolean"
          },
          "documents": {
            "description": "company documents",
            "items": {
              "$ref": "#/components/schemas/ApiCompanyDocument"
            },
            "type": "array"
          },
          "email": {
            "description": "email",
            "type": "string"
          },
          "headquarters": {
            "$ref": "#/components/schemas/ApiAddress",
            "description": "headquarters"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "interview": {
            "description": "interview",
            "type": "string"
          },
          "language": {
            "description": "Language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "logo": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "high-resolution logo of the company (jpeg, jpg, png)"
          },
          "manager": {
            "description": "name of manager / CEO",
            "type": "string"
          },
          "mediaLinks": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "social media URL links (Facebook, Instagram, Twitter, YouTube, ...)",
            "type": "object"
          },
          "name": {
            "description": "company name",
            "type": "string"
          },
          "phone": {
            "description": "webpage",
            "type": "string"
          },
          "purchaseProofDocumentMultipleFarmers": {
            "description": "Enable adding multiple farmers for one proof document on purchase order form",
            "example": false,
            "type": "boolean"
          },
          "users": {
            "description": "Add users with these ids",
            "items": {
              "$ref": "#/components/schemas/ApiBaseEntity"
            },
            "type": "array"
          },
          "valueChains": {
            "description": "company value chains",
            "items": {
              "$ref": "#/components/schemas/ApiValueChain"
            },
            "type": "array"
          },
          "webPage": {
            "description": "webpage",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCompanyUser": {
        "properties": {
          "companyRole": {
            "description": "company role",
            "enum": [
              "USER",
              "ADMIN",
              "MANAGER",
              "ACCOUNTANT"
            ],
            "type": "string"
          },
          "email": {
            "description": "Email/username",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "role": {
            "description": "User role",
            "enum": [
              "USER",
              "ADMIN",
              "MANAGER",
              "ACCOUNTANT"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status",
            "enum": [
              "UNCONFIRMED",
              "CONFIRMED_EMAIL",
              "ACTIVE",
              "DEACTIVATED"
            ],
            "type": "string"
          },
          "surname": {
            "description": "Surname",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCountry": {
        "properties": {
          "code": {
            "description": "Two letter country code of country (ISO 3166-1 alpha-2 code).",
            "type": "string"
          },
          "id": {
            "description": "Db id.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "Country name.",
            "type": "string"
          }
        },
        "required": [
          "code",
          "name"
        ],
        "type": "object"
      },
      "ApiCreateUserRequest": {
        "properties": {
          "email": {
            "description": "Email (username).",
            "type": "string"
          },
          "language": {
            "description": "language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Name.",
            "type": "string"
          },
          "password": {
            "description": "Password.",
            "type": "string"
          },
          "surname": {
            "description": "Surname.",
            "type": "string"
          }
        },
        "required": [
          "email",
          "name",
          "password",
          "surname"
        ],
        "type": "object"
      },
      "ApiCurrencyType": {
        "properties": {
          "code": {
            "description": "code",
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "label": {
            "description": "label",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiDefaultResponse": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiDocument": {
        "properties": {
          "contentType": {
            "description": "content type",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "document (file) name",
            "type": "string"
          },
          "size": {
            "description": "size",
            "format": "int64",
            "type": "integer"
          },
          "storageKey": {
            "description": "storage key (file on system, s3, ...).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiEmail": {
        "properties": {
          "email": {
            "description": "Email",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiFacility": {
        "properties": {
          "company": {
            "$ref": "#/components/schemas/ApiCompanyBase",
            "description": "Facility company"
          },
          "deactivated": {
            "type": "boolean"
          },
          "displayMayInvolveCollectors": {
            "description": "Enable form control 'May involve collectors'",
            "example": false,
            "type": "boolean"
          },
          "displayOrganic": {
            "description": "Enable form control 'Organic'",
            "example": false,
            "type": "boolean"
          },
          "displayPriceDeductionDamage": {
            "description": "Enable form control 'Price deduction damage'",
            "example": false,
            "type": "boolean"
          },
          "displayPriceDeterminedLater": {
            "description": "Enable form control 'Price determined later'",
            "example": false,
            "type": "boolean"
          },
          "displayTare": {
            "description": "Enable form control 'Tare'",
            "example": false,
            "type": "boolean"
          },
          "displayWeightDeductionDamage": {
            "description": "Enable form control 'Weight deduction damage'",
            "example": false,
            "type": "boolean"
          },
          "displayWomenOnly": {
            "description": "Enable form control 'Women only'",
            "example": false,
            "type": "boolean"
          },
          "facilityFinalProducts": {
            "description": "List of final product ID's for this facility",
            "items": {
              "$ref": "#/components/schemas/ApiFinalProduct"
            },
            "type": "array"
          },
          "facilityLocation": {
            "$ref": "#/components/schemas/ApiFacilityLocation",
            "description": "Facility location"
          },
          "facilitySemiProductList": {
            "description": "List of semi product ID's for this facility",
            "items": {
              "$ref": "#/components/schemas/ApiSemiProduct"
            },
            "type": "array"
          },
          "facilityType": {
            "$ref": "#/components/schemas/ApiFacilityType",
            "description": "Facility type"
          },
          "facilityValueChains": {
            "description": "List of value chains for this facility",
            "items": {
              "$ref": "#/components/schemas/ApiValueChain"
            },
            "type": "array"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "isCollectionFacility": {
            "description": "Is collection facility",
            "example": false,
            "type": "boolean"
          },
          "isPublic": {
            "description": "Is public facility",
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "Facility name",
            "type": "string"
          },
          "translations": {
            "description": "List of facility translations",
            "items": {
              "$ref": "#/components/schemas/ApiFacilityTranslation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiFacilityLocation": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ApiAddress",
            "description": "location address"
          },
          "latitude": {
            "description": "location latitude",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "location longitude",
            "format": "double",
            "type": "number"
          },
          "numberOfFarmers": {
            "description": "number of farmers at this location",
            "format": "int32",
            "type": "integer"
          },
          "pinName": {
            "description": "pin (location) name",
            "type": "string"
          },
          "publiclyVisible": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiFacilityTranslation": {
        "properties": {
          "language": {
            "description": "Facility language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Facility name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiFacilityType": {
        "properties": {
          "code": {
            "description": "code",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "label": {
            "description": "label",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiFarmInformation": {
        "properties": {
          "areaOrganicCertified": {
            "description": "Area is organic certified",
            "type": "number"
          },
          "areaUnit": {
            "description": "Area unit",
            "type": "string"
          },
          "farmPlantInformationList": {
            "description": "List of plant information",
            "items": {
              "$ref": "#/components/schemas/ApiFarmPlantInformation"
            },
            "type": "array"
          },
          "organic": {
            "description": "Organic",
            "example": false,
            "type": "boolean"
          },
          "startTransitionToOrganic": {
            "description": "Start date of transition to organic",
            "format": "date-time",
            "type": "string"
          },
          "totalCultivatedArea": {
            "description": "Total cultivated area (ha)",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiFarmPlantInformation": {
        "properties": {
          "numberOfPlants": {
            "description": "Number of plants",
            "format": "int32",
            "type": "integer"
          },
          "plantCultivatedArea": {
            "description": "Area cultivated with plant (ha)",
            "type": "number"
          },
          "productType": {
            "$ref": "#/components/schemas/ApiProductType",
            "description": "Product type"
          }
        },
        "type": "object"
      },
      "ApiFinalProduct": {
        "properties": {
          "description": {
            "description": "Description of final product",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/ApiProductLabelBase"
            },
            "type": "array"
          },
          "measurementUnitType": {
            "$ref": "#/components/schemas/ApiMeasureUnitType",
            "description": "Measurement unit type of final product"
          },
          "name": {
            "description": "Name of final product",
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/ApiProductBase",
            "description": "The Product that this final product belongs"
          }
        },
        "type": "object"
      },
      "ApiGeoAddress": {
        "properties": {
          "address": {
            "description": "address",
            "type": "string"
          },
          "cell": {
            "description": "Village cell",
            "type": "string"
          },
          "city": {
            "description": "city",
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/ApiCountry",
            "description": "country"
          },
          "hondurasDepartment": {
            "description": "Honduras department name",
            "type": "string"
          },
          "hondurasFarm": {
            "description": "Honduras farm name",
            "type": "string"
          },
          "hondurasMunicipality": {
            "description": "Honduras municipality name",
            "type": "string"
          },
          "hondurasVillage": {
            "description": "Honduras village name",
            "type": "string"
          },
          "latitude": {
            "description": "location latitude",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "location longitude",
            "format": "double",
            "type": "number"
          },
          "sector": {
            "description": "Village sector",
            "type": "string"
          },
          "state": {
            "description": "state / province / region",
            "type": "string"
          },
          "village": {
            "description": "Village name",
            "type": "string"
          },
          "zip": {
            "description": "ZIP / postal code / p.p. box",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiGlobalSettingsValue": {
        "properties": {
          "isPublic": {
            "description": "Can be accessed via public api",
            "example": false,
            "type": "boolean"
          },
          "value": {
            "description": "Global settings value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiGroupStockOrder": {
        "properties": {
          "available": {
            "type": "boolean"
          },
          "availableQuantity": {
            "description": "Available quantity",
            "type": "number"
          },
          "deliveryTime": {
            "description": "Delivery time",
            "format": "date",
            "type": "string"
          },
          "finalProductName": {
            "description": "Final product name",
            "type": "string"
          },
          "fulfilledQuantity": {
            "description": "Fulfilled quantity",
            "type": "number"
          },
          "groupedIds": {
            "description": "List of stock order ID's, belonging to this group",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "internalLotNumber": {
            "description": "Internal LOT number",
            "type": "string"
          },
          "noOfSacs": {
            "description": "Number of sacs (if the order was repackaged)",
            "format": "int64",
            "type": "integer"
          },
          "orderType": {
            "description": "Order type",
            "enum": [
              "PURCHASE_ORDER",
              "PROCESSING_ORDER",
              "GENERAL_ORDER",
              "TRANSFER_ORDER"
            ],
            "type": "string"
          },
          "productionDate": {
            "description": "Production date",
            "format": "date",
            "type": "string"
          },
          "semiProductName": {
            "description": "Semi product name",
            "type": "string"
          },
          "totalQuantity": {
            "description": "Total quantity",
            "type": "number"
          },
          "unitLabel": {
            "description": "Measurement unit",
            "type": "string"
          },
          "updateTimestamp": {
            "description": "Timestamp indicates when process order have been updated",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiHistoryTimeline": {
        "properties": {
          "items": {
            "description": "The items in the history timeline",
            "items": {
              "$ref": "#/components/schemas/ApiHistoryTimelineItem"
            },
            "type": "array"
          },
          "journeyMarkers": {
            "description": "The items in the journey of history timeline",
            "items": {
              "$ref": "#/components/schemas/ApiProductJourneyMarker"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiHistoryTimelineItem": {
        "properties": {
          "date": {
            "format": "date",
            "type": "string"
          },
          "iconType": {
            "enum": [
              "SHIP",
              "LEAF",
              "WAREHOUSE",
              "QRCODE",
              "OTHER"
            ],
            "type": "string"
          },
          "latitude": {
            "format": "double",
            "type": "number"
          },
          "location": {
            "type": "string"
          },
          "longitude": {
            "format": "double",
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "step": {
            "format": "int32",
            "type": "integer"
          },
          "steps": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiKnowledgeBlog": {
        "properties": {
          "content": {
            "description": "Content",
            "type": "string"
          },
          "date": {
            "description": "Date",
            "format": "date",
            "type": "string"
          },
          "documents": {
            "description": "Documents",
            "items": {
              "$ref": "#/components/schemas/ApiDocument"
            },
            "type": "array"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "summary": {
            "description": "Abstract (summary)",
            "type": "string"
          },
          "title": {
            "description": "Name",
            "type": "string"
          },
          "type": {
            "description": "Type",
            "enum": [
              "FAIRNESS",
              "QUALITY",
              "PROVENANCE"
            ],
            "type": "string"
          },
          "youtubeUrl": {
            "description": "Youtube URL",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiKnowledgeBlogBase": {
        "properties": {
          "date": {
            "description": "Date",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "title": {
            "description": "Name",
            "type": "string"
          },
          "type": {
            "description": "Type",
            "enum": [
              "FAIRNESS",
              "QUALITY",
              "PROVENANCE"
            ],
            "type": "string"
          },
          "youtubeUrl": {
            "description": "Youtube URL",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiLocation": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ApiAddress",
            "description": "location address"
          },
          "latitude": {
            "description": "location latitude",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "location longitude",
            "format": "double",
            "type": "number"
          },
          "numberOfFarmers": {
            "description": "number of farmers at this location",
            "format": "int32",
            "type": "integer"
          },
          "pinName": {
            "description": "pin (location) name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiLogRequest": {
        "properties": {
          "logKey": {
            "description": "log key to store (max 64 chars)",
            "type": "string"
          },
          "token": {
            "description": "request token",
            "type": "string"
          },
          "type": {
            "description": "type",
            "enum": [
              "VISIT_QR",
              "VERIFY_BATCH",
              "VERIFY_BATCH_ORIGIN",
              "CLICK_CERT_STD",
              "CLICK_PROD_REC",
              "CLICK_COMPANY_PAGE",
              "CLICK_SOCIAL_MEDIA",
              "LANDING_PAGE",
              "CLICK_VERIFY_BATCH",
              "CLICK_VERIFY_BATCH_ORIGIN"
            ],
            "type": "string"
          },
          "value1": {
            "description": "value 1 (max 255 chars)",
            "type": "string"
          },
          "value2": {
            "description": "value 2 (max 255 chars)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiLoginRequest": {
        "properties": {
          "password": {
            "description": "Password.",
            "type": "string"
          },
          "username": {
            "description": "Email (username).",
            "type": "string"
          }
        },
        "required": [
          "password",
          "username"
        ],
        "type": "object"
      },
      "ApiMeasureUnitType": {
        "properties": {
          "code": {
            "description": "code",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "label": {
            "description": "label",
            "type": "string"
          },
          "underlyingMeasurementUnitType": {
            "$ref": "#/components/schemas/ApiMeasureUnitType",
            "description": "the underlying measurement unit type"
          },
          "weight": {
            "description": "the weight of the measurement unit type",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiActionType_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiActionType"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiBulkPayment_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiBulkPayment"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiCompanyCustomer_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiCompanyCustomer"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiCompanyListResponse_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiCompanyListResponse"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiCountry_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiCountry"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiCurrencyType_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiCurrencyType"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiFacilityType_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiFacilityType"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiFacility_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiFacility"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiFinalProduct_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiFinalProduct"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiGroupStockOrder_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiGroupStockOrder"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiKnowledgeBlogBase_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiKnowledgeBlogBase"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiMeasureUnitType_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiMeasureUnitType"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiPayment_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiPayment"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiProcessingAction_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiProcessingAction"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiProcessingEvidenceField_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiProcessingEvidenceField"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiProcessingEvidenceType_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiProcessingEvidenceType"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiProductLabelBatch_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiProductLabelBatch"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiProductLabelFeedback_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiProductLabelFeedback"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiProductListResponse_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiProductListResponse"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiProductType_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiProductType"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiSemiProduct_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiSemiProduct"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiStockOrder_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiStockOrder"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiTransaction_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiTransaction"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiUserBase_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiUserBase"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiUserCustomer_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiUserCustomer"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedList_ApiValueChain_": {
        "properties": {
          "count": {
            "description": "Count of all items satisfying 'paginatable' request.",
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "description": "Response items.",
            "items": {
              "$ref": "#/components/schemas/ApiValueChain"
            },
            "type": "array"
          },
          "limit": {
            "description": "Limit got from request",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Offset got from request",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiPaginatedResponse_ApiActionType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiActionType_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiBulkPayment_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiBulkPayment_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiCompanyCustomer_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiCompanyCustomer_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiCompanyListResponse_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiCompanyListResponse_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiCountry_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiCountry_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiCurrencyType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiCurrencyType_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiFacilityType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiFacilityType_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiFacility_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiFacility_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiFinalProduct_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiFinalProduct_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiGroupStockOrder_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiGroupStockOrder_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiKnowledgeBlogBase_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiKnowledgeBlogBase_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiMeasureUnitType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiMeasureUnitType_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiPayment_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiPayment_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiProcessingAction_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiProcessingAction_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiProcessingEvidenceField_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiProcessingEvidenceField_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiProcessingEvidenceType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiProcessingEvidenceType_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiProductLabelBatch_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiProductLabelBatch_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiProductLabelFeedback_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiProductLabelFeedback_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiProductListResponse_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiProductListResponse_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiProductType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiProductType_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiSemiProduct_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiSemiProduct_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiStockOrder_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiStockOrder_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiTransaction_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiTransaction_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiUserBase_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiUserBase_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiUserCustomer_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiUserCustomer_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPaginatedResponse_ApiValueChain_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPaginatedList_ApiValueChain_",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiPayment": {
        "properties": {
          "amount": {
            "description": "Payment amount paid (to a farmer or recipient company)",
            "type": "number"
          },
          "amountPaidToTheCollector": {
            "description": "Payment amount paid to the collector",
            "type": "number"
          },
          "createdBy": {
            "$ref": "#/components/schemas/ApiUser",
            "description": "Payment created by user"
          },
          "currency": {
            "description": "Payment's currency",
            "type": "string"
          },
          "formalCreationTime": {
            "description": "Formal creation date (for example: date on receipt)",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "payingCompany": {
            "$ref": "#/components/schemas/ApiCompany",
            "description": "Paying company"
          },
          "paymentConfirmedAtTime": {
            "description": "Payment time confirmation",
            "format": "date-time",
            "type": "string"
          },
          "paymentConfirmedByUser": {
            "$ref": "#/components/schemas/ApiUser",
            "description": "User who confirmed the payment"
          },
          "paymentPurposeType": {
            "description": "Payment purpose type",
            "enum": [
              "ADVANCE_PAYMENT",
              "FIRST_INSTALLMENT",
              "SECOND_INSTALLMENT",
              "WOMEN_PREMIUM",
              "INVOICE_PAYMENT"
            ],
            "type": "string"
          },
          "paymentStatus": {
            "description": "Payment status",
            "enum": [
              "UNCONFIRMED",
              "CONFIRMED"
            ],
            "type": "string"
          },
          "paymentType": {
            "description": "Payment type",
            "enum": [
              "CASH",
              "CASH_VIA_COLLECTOR",
              "BANK_TRANSFER",
              "CHEQUE",
              "OFFSETTING"
            ],
            "type": "string"
          },
          "preferredWayOfPayment": {
            "description": "Preferred way of payment",
            "enum": [
              "CASH",
              "CASH_VIA_COLLECTOR",
              "BANK_TRANSFER",
              "CHEQUE",
              "OFFSETTING",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "productionDate": {
            "description": "Production date",
            "format": "date",
            "type": "string"
          },
          "purchased": {
            "description": "Quantity purchased to be paid",
            "format": "int32",
            "type": "integer"
          },
          "receiptDocument": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "Receipt document"
          },
          "receiptDocumentType": {
            "description": "Receipt document type",
            "enum": [
              "PURCHASE_SHEET",
              "RECEIPT"
            ],
            "type": "string"
          },
          "receiptNumber": {
            "description": "Receipt number",
            "type": "string"
          },
          "recipientCompany": {
            "$ref": "#/components/schemas/ApiCompanyBase",
            "description": "Company that receives the payment"
          },
          "recipientType": {
            "description": "Recipient type",
            "enum": [
              "COMPANY",
              "USER_CUSTOMER"
            ],
            "type": "string"
          },
          "recipientUserCustomer": {
            "$ref": "#/components/schemas/ApiUserCustomer",
            "description": "User customer that receives the payment (farmer)"
          },
          "representativeOfRecipientUserCustomer": {
            "$ref": "#/components/schemas/ApiUserCustomer",
            "description": "Representative of the user customer that receives the payment (collector)"
          },
          "stockOrder": {
            "$ref": "#/components/schemas/ApiStockOrder",
            "description": "Stock order related to the payment"
          },
          "totalPaid": {
            "description": "Payment total amount",
            "type": "number"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/ApiUser",
            "description": "Payment updated by user"
          },
          "updatedTimestamp": {
            "description": "Last updated timestamp",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProcess": {
        "properties": {
          "codesOfConduct": {
            "description": "codes of conduct - Briefly describe your company codes of conduct that your employees",
            "type": "string"
          },
          "production": {
            "description": "production description - Briefly describe your production process",
            "type": "string"
          },
          "records": {
            "description": "production records",
            "items": {
              "$ref": "#/components/schemas/ApiProcessDocument"
            },
            "type": "array"
          },
          "standards": {
            "description": "certifications and standards",
            "items": {
              "$ref": "#/components/schemas/ApiCertification"
            },
            "type": "array"
          },
          "storage": {
            "description": "storage - Briefly describe your storage procedures",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProcessDocument": {
        "properties": {
          "description": {
            "description": "description of this document",
            "type": "string"
          },
          "document": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "certificate for this document"
          }
        },
        "type": "object"
      },
      "ApiProcessingAction": {
        "properties": {
          "company": {
            "$ref": "#/components/schemas/ApiCompanyBase",
            "description": "Processing action company"
          },
          "description": {
            "description": "Processing action description",
            "type": "string"
          },
          "estimatedOutputQuantityPerUnit": {
            "description": "The estimated output quantity per unit for this processing action",
            "type": "number"
          },
          "finalProductAction": {
            "description": "Denoting if this processing action is Transfer or Quote of a Final product",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "inputFinalProduct": {
            "$ref": "#/components/schemas/ApiFinalProduct",
            "description": "The input Final product"
          },
          "inputSemiProduct": {
            "$ref": "#/components/schemas/ApiSemiProduct",
            "description": "Processing action input semi product"
          },
          "language": {
            "description": "Processing action language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "maxOutputWeight": {
            "description": "Processing action maximum output weight",
            "type": "number"
          },
          "name": {
            "description": "Processing action name",
            "type": "string"
          },
          "outputFinalProduct": {
            "$ref": "#/components/schemas/ApiFinalProduct",
            "description": "The output final product"
          },
          "outputSemiProducts": {
            "description": "List of supported output semi-products",
            "items": {
              "$ref": "#/components/schemas/ApiSemiProduct"
            },
            "type": "array"
          },
          "prefix": {
            "description": "Processing action prefix",
            "type": "string"
          },
          "publicTimelineIconType": {
            "description": "Processing action public timeline icon type",
            "enum": [
              "SHIP",
              "LEAF",
              "WAREHOUSE",
              "QRCODE",
              "OTHER"
            ],
            "type": "string"
          },
          "publicTimelineLabel": {
            "description": "Processing action public timeline label",
            "type": "string"
          },
          "publicTimelineLocation": {
            "description": "Processing action public timeline location",
            "type": "string"
          },
          "qrCodeForFinalProduct": {
            "$ref": "#/components/schemas/ApiFinalProduct",
            "description": "The Final product for which the QR code tag will be generated (used with action type GENERATE_QR_CODE)"
          },
          "repackedOutputs": {
            "description": "Processing action repacked outputs",
            "example": false,
            "type": "boolean"
          },
          "requiredDocumentTypes": {
            "description": "Processing action required document types",
            "items": {
              "$ref": "#/components/schemas/ApiProcessingEvidenceType"
            },
            "type": "array"
          },
          "requiredEvidenceFields": {
            "description": "Processing action required evidence fields",
            "items": {
              "$ref": "#/components/schemas/ApiProcessingEvidenceField"
            },
            "type": "array"
          },
          "sortOrder": {
            "description": "Sort order number. Lower number means first",
            "format": "int64",
            "type": "integer"
          },
          "supportedFacilities": {
            "description": "List of facilities where this processing starts",
            "items": {
              "$ref": "#/components/schemas/ApiFacility"
            },
            "type": "array"
          },
          "translations": {
            "description": "Processing action translations",
            "items": {
              "$ref": "#/components/schemas/ApiProcessingActionTranslation"
            },
            "type": "array"
          },
          "type": {
            "description": "Processing action type",
            "enum": [
              "PROCESSING",
              "FINAL_PROCESSING",
              "SHIPMENT",
              "TRANSFER",
              "GENERATE_QR_CODE"
            ],
            "type": "string"
          },
          "valueChains": {
            "description": "List of value chains for this processing action",
            "items": {
              "$ref": "#/components/schemas/ApiValueChain"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiProcessingActionTranslation": {
        "properties": {
          "description": {
            "description": "Processing action description",
            "type": "string"
          },
          "language": {
            "description": "Processing action language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Processing action name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProcessingEvidenceField": {
        "properties": {
          "fieldName": {
            "description": "Processing evidence field name",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "label": {
            "description": "Processing evidence field label",
            "type": "string"
          },
          "mandatory": {
            "description": "Processing evidence field mandatory",
            "example": false,
            "type": "boolean"
          },
          "requiredOnQuote": {
            "description": "Processing evidence field required on quote",
            "example": false,
            "type": "boolean"
          },
          "translations": {
            "description": "Processing evidence field translations",
            "items": {
              "$ref": "#/components/schemas/ApiProcessingEvidenceFieldTranslation"
            },
            "type": "array"
          },
          "type": {
            "description": "Processing evidence field type",
            "enum": [
              "STRING",
              "TEXT",
              "NUMBER",
              "INTEGER",
              "DATE",
              "OBJECT",
              "PRICE",
              "EXCHANGE_RATE",
              "TIMESTAMP"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProcessingEvidenceFieldTranslation": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "label": {
            "description": "Processing evidence field label",
            "type": "string"
          },
          "language": {
            "description": "Processing evidence field language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProcessingEvidenceType": {
        "properties": {
          "code": {
            "description": "code",
            "type": "string"
          },
          "fairness": {
            "description": "if evidence is of fairness type",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "label": {
            "description": "label",
            "type": "string"
          },
          "mandatory": {
            "description": "whether the evidence is mandatory",
            "example": false,
            "type": "boolean"
          },
          "provenance": {
            "description": "if evidence is of provenance type",
            "example": false,
            "type": "boolean"
          },
          "quality": {
            "description": "if evidence is of quality type",
            "example": false,
            "type": "boolean"
          },
          "requiredOnQuote": {
            "description": "whether the evidence is required on quote",
            "example": false,
            "type": "boolean"
          },
          "requiredOneOfGroupIdForQuote": {
            "description": "a group in which at least one document has to be provided",
            "type": "string"
          },
          "translations": {
            "description": "Translations for processing evidence type",
            "items": {
              "$ref": "#/components/schemas/ApiProcessingEvidenceTypeTranslation"
            },
            "type": "array"
          },
          "type": {
            "description": "type of evidence",
            "enum": [
              "DOCUMENT",
              "FIELD",
              "CALCULATED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProcessingEvidenceTypeTranslation": {
        "properties": {
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "label": {
            "description": "Processing evidence type label",
            "type": "string"
          },
          "language": {
            "description": "Processing evidence type language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProcessingOrder": {
        "properties": {
          "creationTimestamp": {
            "description": "Timestamp indicates when processing order have been created",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "initiatorUserId": {
            "description": "Initiator user ID",
            "format": "int64",
            "type": "integer"
          },
          "inputTransactions": {
            "description": "Input transactions",
            "items": {
              "$ref": "#/components/schemas/ApiTransaction"
            },
            "type": "array"
          },
          "processingAction": {
            "$ref": "#/components/schemas/ApiProcessingAction",
            "description": "Processing action"
          },
          "processingDate": {
            "description": "Processing date",
            "format": "date",
            "type": "string"
          },
          "targetStockOrders": {
            "description": "Target stock orders",
            "items": {
              "$ref": "#/components/schemas/ApiStockOrder"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiProduct": {
        "properties": {
          "associatedCompanies": {
            "description": "associated companies",
            "items": {
              "$ref": "#/components/schemas/ApiProductCompany"
            },
            "type": "array"
          },
          "businessToCustomerSettings": {
            "$ref": "#/components/schemas/ApiBusinessToCustomerSettings",
            "description": "B2C settings"
          },
          "company": {
            "$ref": "#/components/schemas/ApiCompany",
            "description": "company"
          },
          "dataSharingAgreements": {
            "description": "Data sharing agreements",
            "items": {
              "$ref": "#/components/schemas/ApiProductDataSharingAgreement"
            },
            "type": "array"
          },
          "description": {
            "description": "product description",
            "type": "string"
          },
          "howToUse": {
            "description": "how to Use / Recipes - Describe the best way to use the product (e.g. recipes, how to apply the product...)",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "ingredients": {
            "description": "ingredients - list the ingredients in the product and describe their properties",
            "type": "string"
          },
          "journeyMarkers": {
            "description": "Product journey path",
            "items": {
              "$ref": "#/components/schemas/ApiProductJourneyMarker"
            },
            "type": "array"
          },
          "keyMarketsShare": {
            "additionalProperties": {
              "format": "double",
              "type": "number"
            },
            "description": "Key Markets, market name - share number map",
            "type": "object"
          },
          "knowledgeBlog": {
            "description": "knowledge blog",
            "example": false,
            "type": "boolean"
          },
          "labels": {
            "description": "labels",
            "items": {
              "$ref": "#/components/schemas/ApiProductLabelValues"
            },
            "type": "array"
          },
          "name": {
            "description": "product name",
            "type": "string"
          },
          "nutritionalValue": {
            "description": "nutritional Value - list the nutritional value of the product",
            "type": "string"
          },
          "origin": {
            "$ref": "#/components/schemas/ApiProductOrigin",
            "description": "origin - text and location "
          },
          "photo": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "high-resolution photo of the product (jpeg, jpg, png), 72dpi and 1200x2000px recommended"
          },
          "process": {
            "$ref": "#/components/schemas/ApiProcess",
            "description": "process"
          },
          "responsibility": {
            "$ref": "#/components/schemas/ApiResponsibility",
            "description": "social responsibility"
          },
          "settings": {
            "$ref": "#/components/schemas/ApiProductSettings",
            "description": "settings"
          },
          "specialityDescription": {
            "description": "speciality document",
            "type": "string"
          },
          "specialityDocument": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "speciality document"
          },
          "sustainability": {
            "$ref": "#/components/schemas/ApiSustainability",
            "description": "environmental sustainability"
          },
          "valueChain": {
            "$ref": "#/components/schemas/ApiValueChain",
            "description": "Value chain"
          }
        },
        "type": "object"
      },
      "ApiProductBase": {
        "properties": {
          "description": {
            "description": "product description",
            "type": "string"
          },
          "howToUse": {
            "description": "how to Use / Recipes - Describe the best way to use the product (e.g. recipes, how to apply the product...)",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "ingredients": {
            "description": "ingredients - list the ingredients in the product and describe their properties",
            "type": "string"
          },
          "keyMarketsShare": {
            "additionalProperties": {
              "format": "double",
              "type": "number"
            },
            "description": "Key Markets, market name - share number map",
            "type": "object"
          },
          "name": {
            "description": "product name",
            "type": "string"
          },
          "nutritionalValue": {
            "description": "nutritional Value - list the nutritional value of the product",
            "type": "string"
          },
          "origin": {
            "$ref": "#/components/schemas/ApiProductOrigin",
            "description": "origin - text and location "
          }
        },
        "type": "object"
      },
      "ApiProductCompany": {
        "properties": {
          "company": {
            "$ref": "#/components/schemas/ApiCompanyListResponse",
            "description": "associated company"
          },
          "type": {
            "description": "associated company type",
            "enum": [
              "BUYER",
              "IMPORTER",
              "EXPORTER",
              "OWNER",
              "PRODUCER",
              "ASSOCIATION",
              "PROCESSOR",
              "TRADER",
              "ROASTER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductDataSharingAgreement": {
        "properties": {
          "description": {
            "description": "Description of this document",
            "type": "string"
          },
          "document": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "Document attached to the product"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiProductJourneyMarker": {
        "properties": {
          "latitude": {
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiProductLabel": {
        "properties": {
          "businessToCustomerSettings": {
            "$ref": "#/components/schemas/ApiBusinessToCustomerSettings",
            "description": "B2C settings"
          },
          "fields": {
            "description": "Fields",
            "items": {
              "$ref": "#/components/schemas/ApiProductLabelField"
            },
            "type": "array"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "Label language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "productId": {
            "description": "Product id",
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "description": "Product label status",
            "enum": [
              "UNPUBLISHED",
              "PUBLISHED"
            ],
            "type": "string"
          },
          "title": {
            "description": "label title",
            "type": "string"
          },
          "uuid": {
            "description": "Product label uuid (for url)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductLabelAnalytics": {
        "properties": {
          "authCountries": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "description": "number of authenticity checks per country",
            "type": "object"
          },
          "authFalse": {
            "description": "number of unsuccessful authenticity checks",
            "format": "int32",
            "type": "integer"
          },
          "authLocations": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "description": "number of authenticity checks per lat:lon",
            "type": "object"
          },
          "authTrue": {
            "description": "number of successful authenticity checks",
            "format": "int32",
            "type": "integer"
          },
          "originCountries": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "description": "number of origin checks per country",
            "type": "object"
          },
          "originFalse": {
            "description": "number of unsuccessful origin checks",
            "format": "int32",
            "type": "integer"
          },
          "originLocations": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "description": "number of origin checks per lat:lon",
            "type": "object"
          },
          "originTrue": {
            "description": "number of successful origin checks",
            "format": "int32",
            "type": "integer"
          },
          "visits": {
            "description": "number of vistis",
            "format": "int32",
            "type": "integer"
          },
          "visitsCountries": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "description": "number of visits per country",
            "type": "object"
          },
          "visitsLocations": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "description": "number of visits per lat:lon",
            "type": "object"
          }
        },
        "type": "object"
      },
      "ApiProductLabelBase": {
        "properties": {
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "Label language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "productId": {
            "description": "Product id",
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "description": "Product label status",
            "enum": [
              "UNPUBLISHED",
              "PUBLISHED"
            ],
            "type": "string"
          },
          "title": {
            "description": "label title",
            "type": "string"
          },
          "uuid": {
            "description": "Product label uuid (for url)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductLabelBatch": {
        "properties": {
          "checkAuthenticity": {
            "description": "enable authenticity check",
            "example": false,
            "type": "boolean"
          },
          "expiryDate": {
            "description": "Expiry date",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "labelId": {
            "description": "Label id",
            "format": "int64",
            "type": "integer"
          },
          "locations": {
            "description": "batch farming location",
            "items": {
              "$ref": "#/components/schemas/ApiLocation"
            },
            "type": "array"
          },
          "number": {
            "description": "Batch number",
            "type": "string"
          },
          "photo": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "batch photo"
          },
          "productionDate": {
            "description": "Production date",
            "format": "date",
            "type": "string"
          },
          "traceOrigin": {
            "description": "enable tracing origin",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiProductLabelCompanyDocument": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "category": {
            "description": "document category",
            "enum": [
              "VIDEO",
              "PRODUCTION_RECORD",
              "MEET_THE_FARMER"
            ],
            "type": "string"
          },
          "description": {
            "description": "description of this document",
            "type": "string"
          },
          "document": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "document"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "link": {
            "description": "link",
            "type": "string"
          },
          "name": {
            "description": "name",
            "type": "string"
          },
          "quote": {
            "description": "quote of this document",
            "type": "string"
          },
          "type": {
            "description": "type of the document (link, file)",
            "enum": [
              "LINK",
              "FILE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductLabelContent": {
        "properties": {
          "businessToCustomerSettings": {
            "$ref": "#/components/schemas/ApiBusinessToCustomerSettings",
            "description": "B2C settings"
          },
          "company": {
            "$ref": "#/components/schemas/ApiCompany",
            "description": "company"
          },
          "description": {
            "description": "product description",
            "type": "string"
          },
          "howToUse": {
            "description": "how to Use / Recipes - Describe the best way to use the product (e.g. recipes, how to apply the product...)",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "ingredients": {
            "description": "ingredients - list the ingredients in the product and describe their properties",
            "type": "string"
          },
          "journeyMarkers": {
            "description": "Product journey path",
            "items": {
              "$ref": "#/components/schemas/ApiProductJourneyMarker"
            },
            "type": "array"
          },
          "keyMarketsShare": {
            "additionalProperties": {
              "format": "double",
              "type": "number"
            },
            "description": "Key Markets, market name - share number map",
            "type": "object"
          },
          "knowledgeBlog": {
            "description": "knowledge blog",
            "example": false,
            "type": "boolean"
          },
          "labelId": {
            "description": "label id",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "product name",
            "type": "string"
          },
          "nutritionalValue": {
            "description": "nutritional Value - list the nutritional value of the product",
            "type": "string"
          },
          "origin": {
            "$ref": "#/components/schemas/ApiProductOrigin",
            "description": "origin - text and location "
          },
          "photo": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "high-resolution photo of the product (jpeg, jpg, png), 72dpi and 1200x2000px recommended"
          },
          "process": {
            "$ref": "#/components/schemas/ApiProcess",
            "description": "process"
          },
          "responsibility": {
            "$ref": "#/components/schemas/ApiResponsibility",
            "description": "social responsibility"
          },
          "settings": {
            "$ref": "#/components/schemas/ApiProductSettings",
            "description": "settings"
          },
          "specialityDescription": {
            "description": "speciality document",
            "type": "string"
          },
          "specialityDocument": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "speciality document"
          },
          "sustainability": {
            "$ref": "#/components/schemas/ApiSustainability",
            "description": "environmental sustainability"
          }
        },
        "type": "object"
      },
      "ApiProductLabelFeedback": {
        "properties": {
          "email": {
            "description": "Email",
            "type": "string"
          },
          "feedback": {
            "description": "feedback text",
            "type": "string"
          },
          "gdprConsent": {
            "description": "GDPR consent",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "labelId": {
            "description": "Label id",
            "format": "int64",
            "type": "integer"
          },
          "privacyPolicyConsent": {
            "description": "Privacy policy consent",
            "example": false,
            "type": "boolean"
          },
          "questionnaireAnswers": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "questionnaire answers - key-answer map",
            "type": "object"
          },
          "termsOfUseConsent": {
            "description": "Terms of use consent",
            "example": false,
            "type": "boolean"
          },
          "type": {
            "description": "Feedback type",
            "enum": [
              "PRAISE",
              "PROPOSAL",
              "COMPLAINT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductLabelField": {
        "properties": {
          "name": {
            "description": "Field name in Product",
            "type": "string"
          },
          "section": {
            "description": "Section on FE",
            "type": "string"
          },
          "visible": {
            "description": "Visible on FE",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiProductLabelFieldValue": {
        "properties": {
          "name": {
            "description": "Field name in Product",
            "type": "string"
          },
          "section": {
            "description": "Section on FE",
            "type": "string"
          },
          "value": {
            "description": "Field value in Product",
            "type": "object"
          }
        },
        "type": "object"
      },
      "ApiProductLabelUpdateValues": {
        "properties": {
          "fields": {
            "description": "Fields",
            "items": {
              "$ref": "#/components/schemas/ApiProductLabelFieldValue"
            },
            "type": "array"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "Label language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "productId": {
            "description": "Product id",
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "description": "Product label status",
            "enum": [
              "UNPUBLISHED",
              "PUBLISHED"
            ],
            "type": "string"
          },
          "title": {
            "description": "label title",
            "type": "string"
          },
          "uuid": {
            "description": "Product label uuid (for url)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductLabelValues": {
        "properties": {
          "fields": {
            "description": "Fields",
            "items": {
              "$ref": "#/components/schemas/ApiProductLabelFieldValue"
            },
            "type": "array"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "Label language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "productId": {
            "description": "Product id",
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "description": "Product label status",
            "enum": [
              "UNPUBLISHED",
              "PUBLISHED"
            ],
            "type": "string"
          },
          "title": {
            "description": "label title",
            "type": "string"
          },
          "uuid": {
            "description": "Product label uuid (for url)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductLabelValuesExtended": {
        "properties": {
          "businessToCustomerSettings": {
            "$ref": "#/components/schemas/ApiBusinessToCustomerSettings",
            "description": "B2C settings"
          },
          "checkAuthenticityCount": {
            "description": "Number of true 'checkAuthenticity' fields over all of batches",
            "format": "int32",
            "type": "integer"
          },
          "fields": {
            "description": "Fields",
            "items": {
              "$ref": "#/components/schemas/ApiProductLabelFieldValue"
            },
            "type": "array"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "Label language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "numberOfBatches": {
            "description": "Number of batches",
            "format": "int32",
            "type": "integer"
          },
          "photosMeetTheFarmers": {
            "description": "Meet the farmers photos",
            "items": {
              "$ref": "#/components/schemas/ApiCompanyDocument"
            },
            "type": "array"
          },
          "productId": {
            "description": "Product id",
            "format": "int64",
            "type": "integer"
          },
          "productionRecords": {
            "description": "Production records",
            "items": {
              "$ref": "#/components/schemas/ApiCompanyDocument"
            },
            "type": "array"
          },
          "status": {
            "description": "Product label status",
            "enum": [
              "UNPUBLISHED",
              "PUBLISHED"
            ],
            "type": "string"
          },
          "title": {
            "description": "label title",
            "type": "string"
          },
          "traceOriginCount": {
            "description": "Number of true 'traceOrigin' fields over all of batches",
            "format": "int32",
            "type": "integer"
          },
          "uuid": {
            "description": "Product label uuid (for url)",
            "type": "string"
          },
          "videoMeetTheFarmers": {
            "$ref": "#/components/schemas/ApiCompanyDocument",
            "description": "Meet the farmers video"
          }
        },
        "type": "object"
      },
      "ApiProductListResponse": {
        "properties": {
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "photoStorageId": {
            "description": "Photo storage id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductOrder": {
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/ApiCompanyCustomer",
            "description": "The company customer for whom this order is placed"
          },
          "deliveryDeadline": {
            "description": "The delivery deadline of this order",
            "format": "date",
            "type": "string"
          },
          "facility": {
            "$ref": "#/components/schemas/ApiFacility",
            "description": "Facility to which this order is order is ordered"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "description": "The ordered items(final products) of this order",
            "items": {
              "$ref": "#/components/schemas/ApiStockOrder"
            },
            "type": "array"
          },
          "orderId": {
            "description": "The order ID entered by the user",
            "type": "string"
          },
          "requiredOrganic": {
            "description": "Require organic coffee",
            "example": false,
            "type": "boolean"
          },
          "requiredWomensOnly": {
            "description": "Require only women's coffee",
            "example": false,
            "type": "boolean"
          },
          "updateTimestamp": {
            "description": "Timestamp indicates when product order have been updated",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductOrigin": {
        "properties": {
          "locations": {
            "description": "origin - farmer location",
            "items": {
              "$ref": "#/components/schemas/ApiLocation"
            },
            "type": "array"
          },
          "text": {
            "description": "origin - text and quantity input - Briefly describe where the product or its ingredients are produced",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductSettings": {
        "properties": {
          "checkAuthenticity": {
            "description": "check authenticity",
            "example": false,
            "type": "boolean"
          },
          "costBreakdown": {
            "description": "cost breakdown",
            "example": false,
            "type": "boolean"
          },
          "gdprText": {
            "description": "GDPR text",
            "type": "string"
          },
          "giveFeedback": {
            "description": "give feedback",
            "example": false,
            "type": "boolean"
          },
          "incomeIncreaseDescription": {
            "description": "increase in income - description",
            "type": "string"
          },
          "incomeIncreaseDocument": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "increase in income - document"
          },
          "language": {
            "description": "language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "pricingTransparency": {
            "additionalProperties": {
              "format": "double",
              "type": "number"
            },
            "description": "pricing transparency - string-number map",
            "type": "object"
          },
          "privacyPolicyText": {
            "description": "Privacy policy text",
            "type": "string"
          },
          "termsOfUseText": {
            "description": "Terms of use text",
            "type": "string"
          },
          "traceOrigin": {
            "description": "trace origin",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiProductType": {
        "properties": {
          "code": {
            "type": "string"
          },
          "creationTimestamp": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "translations": {
            "items": {
              "$ref": "#/components/schemas/ApiProductTypeTranslation"
            },
            "type": "array"
          },
          "updateTimestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiProductTypeTranslation": {
        "properties": {
          "description": {
            "description": "Product type description",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "Product type language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Product type name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiPurchaseOrder": {
        "properties": {
          "activityProofs": {
            "description": "Activity proofs",
            "items": {
              "$ref": "#/components/schemas/ApiActivityProof"
            },
            "type": "array"
          },
          "createdBy": {
            "$ref": "#/components/schemas/ApiUser",
            "description": "User that has created PurchaseOrder"
          },
          "creatorId": {
            "description": "ID of the user who has created the stock order",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "Currency",
            "type": "string"
          },
          "deliveryTime": {
            "description": "Delivery date",
            "format": "date",
            "type": "string"
          },
          "facility": {
            "$ref": "#/components/schemas/ApiFacility",
            "description": "Facility"
          },
          "farmers": {
            "items": {
              "$ref": "#/components/schemas/ApiPurchaseOrderFarmer"
            },
            "type": "array"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "preferredWayOfPayment": {
            "description": "Preferred way of payment",
            "enum": [
              "CASH",
              "CASH_VIA_COLLECTOR",
              "BANK_TRANSFER",
              "CHEQUE",
              "OFFSETTING",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "productionDate": {
            "description": "Production date",
            "format": "date",
            "type": "string"
          },
          "representativeOfProducerUserCustomer": {
            "$ref": "#/components/schemas/ApiUserCustomer",
            "description": "Representative of producer user customer. E.g. collector."
          },
          "updateTimestamp": {
            "description": "Timestamp indicates when purchase order have been updated",
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/ApiUser",
            "description": "User that has last updated PurchaseOrder"
          }
        },
        "type": "object"
      },
      "ApiPurchaseOrderFarmer": {
        "properties": {
          "availableQuantity": {
            "description": "Available quantity",
            "type": "number"
          },
          "balance": {
            "description": "Balance",
            "type": "number"
          },
          "cost": {
            "description": "Cost",
            "type": "number"
          },
          "damagedPriceDeduction": {
            "description": "Damaged price deduction",
            "type": "number"
          },
          "damagedWeightDeduction": {
            "description": "Damaged weight deduction",
            "type": "number"
          },
          "fulfilledQuantity": {
            "description": "Fulfilled quantity",
            "type": "number"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "identifier": {
            "description": "Purchase order identifier",
            "type": "string"
          },
          "organic": {
            "description": "Organic",
            "example": false,
            "type": "boolean"
          },
          "pricePerUnit": {
            "description": "Price per unit",
            "type": "number"
          },
          "producerUserCustomer": {
            "$ref": "#/components/schemas/ApiUserCustomer",
            "description": "Id of the person who has produced the entry."
          },
          "semiProduct": {
            "$ref": "#/components/schemas/ApiSemiProduct",
            "description": "Semi product"
          },
          "tare": {
            "description": "Tare",
            "type": "number"
          },
          "totalGrossQuantity": {
            "description": "Total gross quantity",
            "type": "number"
          },
          "totalQuantity": {
            "description": "Total quantity",
            "type": "number"
          },
          "womenShare": {
            "description": "Women only",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiQRTagPublic": {
        "properties": {
          "certificates": {
            "description": "List of certificates of the participating companies in this Stock order",
            "items": {
              "$ref": "#/components/schemas/ApiCertification"
            },
            "type": "array"
          },
          "cuppingFlavour": {
            "description": "The cupping flavour entered during one of the processing actions",
            "type": "string"
          },
          "cuppingScore": {
            "description": "The cupping score entered during one of the processing actions",
            "type": "number"
          },
          "historyTimeline": {
            "$ref": "#/components/schemas/ApiHistoryTimeline"
          },
          "orderId": {
            "description": "The global (product) order of the Stock order",
            "type": "string"
          },
          "priceToFarmer": {
            "description": "Price paid to farmers in EUR/kg",
            "type": "number"
          },
          "priceToProducer": {
            "description": "Price paid to producer in EUR/kg",
            "type": "number"
          },
          "producerName": {
            "description": "The Producer name",
            "type": "string"
          },
          "qrTag": {
            "description": "The QR code tag",
            "type": "string"
          },
          "roastingProfile": {
            "description": "The roasting profile entered during one of the processing actions",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiResetPasswordRequest": {
        "properties": {
          "password": {
            "description": "Password.",
            "type": "string"
          },
          "token": {
            "description": "Reset password token.",
            "type": "string"
          }
        },
        "required": [
          "password",
          "token"
        ],
        "type": "object"
      },
      "ApiResponse_ApiActionType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiActionType",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiBaseEntity_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiBaseEntity",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiBeycoOrderFields_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiBeycoOrderFields",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiBeycoTokenResponse_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiBeycoTokenResponse",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiBulkPayment_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiBulkPayment",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiCompanyCustomer_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiCompanyCustomer",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiCompanyGet_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiCompanyGet",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiDocument_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiFacilityType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiFacilityType",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiFacility_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiFacility",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiFinalProduct_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiFinalProduct",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiGlobalSettingsValue_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiGlobalSettingsValue",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiKnowledgeBlog_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiKnowledgeBlog",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiMeasureUnitType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiMeasureUnitType",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiPayment_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPayment",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProcessingAction_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProcessingAction",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProcessingEvidenceField_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProcessingEvidenceField",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProcessingEvidenceType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProcessingEvidenceType",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProcessingOrder_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProcessingOrder",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProductLabelAnalytics_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProductLabelAnalytics",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProductLabelBatch_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProductLabelBatch",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProductLabelContent_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProductLabelContent",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProductLabelValuesExtended_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProductLabelValuesExtended",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProductLabelValues_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProductLabelValues",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProductLabel_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProductLabel",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProductOrder_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProductOrder",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProductType_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProductType",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiProduct_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiProduct",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiPurchaseOrder_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiPurchaseOrder",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiQRTagPublic_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiQRTagPublic",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiSemiProduct_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiSemiProduct",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiStockOrderHistory_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiStockOrderHistory",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiStockOrder_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiStockOrder",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiUserCustomer_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiUserCustomer",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiUserGet_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiUserGet",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiUser_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiUser",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_ApiValueChain_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiValueChain",
            "description": "Response body for successful responses."
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_List_ApiCompanyUser_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "description": "Response body for successful responses.",
            "items": {
              "$ref": "#/components/schemas/ApiCompanyUser"
            },
            "type": "array"
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_List_ApiLocation_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "description": "Response body for successful responses.",
            "items": {
              "$ref": "#/components/schemas/ApiLocation"
            },
            "type": "array"
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_List_ApiProductLabelBase_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "description": "Response body for successful responses.",
            "items": {
              "$ref": "#/components/schemas/ApiProductLabelBase"
            },
            "type": "array"
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_List_ApiProductLabelCompanyDocument_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "description": "Response body for successful responses.",
            "items": {
              "$ref": "#/components/schemas/ApiProductLabelCompanyDocument"
            },
            "type": "array"
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_boolean_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "description": "Response body for successful responses.",
            "example": false,
            "type": "boolean"
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponse_object_": {
        "description": "Generic API response. See documentation for data type for specific type details.",
        "properties": {
          "data": {
            "description": "Response body for successful responses.",
            "type": "object"
          },
          "errorDetails": {
            "description": "Optional details for unexpected error responses.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Simple message to explain client developers the reason for error.",
            "type": "string"
          },
          "status": {
            "description": "Response status. OK for successful reponses.",
            "enum": [
              "OK",
              "ERROR",
              "REQUEST_BODY_ERROR",
              "VALIDATION_ERROR",
              "TOO_MANY_REQUESTS",
              "UNAUTHORIZED",
              "AUTH_ERROR",
              "UPSTREAM_HTTP_ERROR",
              "INVALID_REQUEST",
              "INVALID_OR_EXPIRED_STORAGE_KEY",
              "NOT_IMPLEMENTED",
              "NOT_FOUND"
            ],
            "example": "OK",
            "type": "string"
          },
          "validationErrorDetails": {
            "$ref": "#/components/schemas/ApiValidationErrorDetails",
            "description": "Optional details for validation error responses."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiResponsibility": {
        "properties": {
          "farmer": {
            "description": "farmers story - farmer or community",
            "type": "string"
          },
          "laborPolicies": {
            "description": "labor policies - Briefly describe labor policies you have in place in your company",
            "type": "string"
          },
          "pictures": {
            "description": "farmers story - pictures",
            "items": {
              "$ref": "#/components/schemas/ApiResponsibilityFarmerPicture"
            },
            "type": "array"
          },
          "relationship": {
            "description": "storage - Briefly describe your storage procedures",
            "type": "string"
          },
          "story": {
            "description": "farmers story - text",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiResponsibilityFarmerPicture": {
        "properties": {
          "description": {
            "description": "description of this picture",
            "type": "string"
          },
          "document": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "picture document"
          }
        },
        "type": "object"
      },
      "ApiSemiProduct": {
        "properties": {
          "buyable": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "measurementUnitType": {
            "$ref": "#/components/schemas/ApiMeasureUnitType"
          },
          "name": {
            "type": "string"
          },
          "sku": {
            "type": "boolean"
          },
          "skuendCustomer": {
            "type": "boolean"
          },
          "translations": {
            "items": {
              "$ref": "#/components/schemas/ApiSemiProductTranslation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiSemiProductTranslation": {
        "properties": {
          "description": {
            "description": "Semi product description",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "Semi product language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Semi product name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiStockOrder": {
        "properties": {
          "activityProofs": {
            "description": "Activity proofs",
            "items": {
              "$ref": "#/components/schemas/ApiActivityProof"
            },
            "type": "array"
          },
          "available": {
            "type": "boolean"
          },
          "availableQuantity": {
            "description": "Available quantity",
            "type": "number"
          },
          "balance": {
            "description": "Balance",
            "type": "number"
          },
          "comments": {
            "description": "Comments",
            "type": "string"
          },
          "company": {
            "$ref": "#/components/schemas/ApiCompany",
            "description": "Company"
          },
          "consumerCompanyCustomer": {
            "$ref": "#/components/schemas/ApiCompanyCustomer",
            "description": "The company customer for whom the stock order is created"
          },
          "cost": {
            "description": "Cost",
            "type": "number"
          },
          "createdBy": {
            "$ref": "#/components/schemas/ApiUser",
            "description": "User that has created StockOrder"
          },
          "creationTimestamp": {
            "description": "Timestamp indicates when stock order have been created",
            "format": "date-time",
            "type": "string"
          },
          "creatorId": {
            "description": "ID of the user who has created the stock order",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "Currency",
            "type": "string"
          },
          "currencyForEndCustomer": {
            "description": "Currency for price per unit for end customer",
            "type": "string"
          },
          "damagedPriceDeduction": {
            "description": "Damaged price deduction",
            "type": "number"
          },
          "damagedWeightDeduction": {
            "description": "Damaged weight deduction",
            "type": "number"
          },
          "deliveryTime": {
            "description": "Delivery time",
            "format": "date",
            "type": "string"
          },
          "facility": {
            "$ref": "#/components/schemas/ApiFacility",
            "description": "Facility"
          },
          "finalProduct": {
            "$ref": "#/components/schemas/ApiFinalProduct",
            "description": "Final product"
          },
          "fulfilledQuantity": {
            "description": "Fulfilled quantity",
            "type": "number"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "identifier": {
            "description": "Stock order identifier",
            "type": "string"
          },
          "internalLotNumber": {
            "description": "Internal LOT number",
            "type": "string"
          },
          "isAvailable": {
            "description": "Is stock available",
            "example": false,
            "type": "boolean"
          },
          "lotPrefix": {
            "description": "The prefix for the LOT name - retrieved from the Processing action",
            "type": "string"
          },
          "measureUnitType": {
            "$ref": "#/components/schemas/ApiMeasureUnitType",
            "description": "Measurement unit"
          },
          "openOrder": {
            "type": "boolean"
          },
          "orderId": {
            "description": "User entered Order ID when placing Quote order",
            "type": "string"
          },
          "orderType": {
            "description": "Order type",
            "enum": [
              "PURCHASE_ORDER",
              "PROCESSING_ORDER",
              "GENERAL_ORDER",
              "TRANSFER_ORDER"
            ],
            "type": "string"
          },
          "organic": {
            "description": "Organic",
            "example": false,
            "type": "boolean"
          },
          "otherEvidenceDocuments": {
            "description": "Other processing evidence documents - evidence types that can be provided but are not mandatory",
            "items": {
              "$ref": "#/components/schemas/ApiStockOrderEvidenceTypeValue"
            },
            "type": "array"
          },
          "outQuantityNotInRange": {
            "description": "Total quantity of this stock order is not within the expected range",
            "example": false,
            "type": "boolean"
          },
          "paid": {
            "description": "Paid",
            "type": "number"
          },
          "payments": {
            "description": "Payments for stock order",
            "items": {
              "$ref": "#/components/schemas/ApiPayment"
            },
            "type": "array"
          },
          "preferredWayOfPayment": {
            "description": "Preferred way of payment",
            "enum": [
              "CASH",
              "CASH_VIA_COLLECTOR",
              "BANK_TRANSFER",
              "CHEQUE",
              "OFFSETTING",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "priceDeterminedLater": {
            "description": "Option to determine price later after taking delivery",
            "example": false,
            "type": "boolean"
          },
          "pricePerUnit": {
            "description": "Price per unit",
            "type": "number"
          },
          "pricePerUnitForEndCustomer": {
            "description": "Price per unit for end customer",
            "type": "number"
          },
          "processingOrder": {
            "$ref": "#/components/schemas/ApiProcessingOrder",
            "description": "The processing order that created this stock order"
          },
          "producerUserCustomer": {
            "$ref": "#/components/schemas/ApiUserCustomer",
            "description": "Id of the person who has produced the entry."
          },
          "productOrder": {
            "$ref": "#/components/schemas/ApiProductOrder",
            "description": "The produrct order that triggered creation of this stock order"
          },
          "productionDate": {
            "description": "Production date",
            "format": "date",
            "type": "string"
          },
          "productionLocation": {
            "$ref": "#/components/schemas/ApiStockOrderLocation",
            "description": "Production location"
          },
          "purchaseOrder": {
            "type": "boolean"
          },
          "qrCodeTag": {
            "description": "Generated UUID tag for this stock order QR code",
            "type": "string"
          },
          "qrCodeTagFinalProduct": {
            "$ref": "#/components/schemas/ApiFinalProduct",
            "description": "The final product for which the QR code tag is generated"
          },
          "quoteCompany": {
            "$ref": "#/components/schemas/ApiCompany",
            "description": "Quote company"
          },
          "quoteFacility": {
            "$ref": "#/components/schemas/ApiFacility",
            "description": "Quote facility"
          },
          "representativeOfProducerUserCustomer": {
            "$ref": "#/components/schemas/ApiUserCustomer",
            "description": "Representative of producer user customer. E.g. collector."
          },
          "requiredEvidenceFieldValues": {
            "description": "Processing evidence fields stored values for this stock order",
            "items": {
              "$ref": "#/components/schemas/ApiStockOrderEvidenceFieldValue"
            },
            "type": "array"
          },
          "requiredEvidenceTypeValues": {
            "description": "Processing evidence types stored values for this stock order",
            "items": {
              "$ref": "#/components/schemas/ApiStockOrderEvidenceTypeValue"
            },
            "type": "array"
          },
          "sacNumber": {
            "description": "SAC number",
            "format": "int32",
            "type": "integer"
          },
          "semiProduct": {
            "$ref": "#/components/schemas/ApiSemiProduct",
            "description": "Semi product"
          },
          "tare": {
            "description": "Tare",
            "type": "number"
          },
          "totalGrossQuantity": {
            "description": "Total gross quantity",
            "type": "number"
          },
          "totalQuantity": {
            "description": "Total quantity",
            "type": "number"
          },
          "updateTimestamp": {
            "description": "Timestamp indicates when stock order have been updated",
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/ApiUser",
            "description": "User that has last updated StockOrder"
          },
          "womenShare": {
            "description": "Is women share",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiStockOrderEvidenceFieldValue": {
        "properties": {
          "booleanValue": {
            "description": "Value holder of type Boolean",
            "example": false,
            "type": "boolean"
          },
          "dateValue": {
            "description": "Value holder of type Date",
            "format": "date-time",
            "type": "string"
          },
          "evidenceFieldId": {
            "description": "The id of the Processing evidence field from the codebook",
            "format": "int64",
            "type": "integer"
          },
          "evidenceFieldName": {
            "description": "The field name of the Processing evidence field from the codebook",
            "type": "string"
          },
          "evidenceFieldType": {
            "description": "The data type oof the Processing evidence field from the codebook",
            "enum": [
              "STRING",
              "TEXT",
              "NUMBER",
              "INTEGER",
              "DATE",
              "OBJECT",
              "PRICE",
              "EXCHANGE_RATE",
              "TIMESTAMP"
            ],
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "numericValue": {
            "description": "Value holder of type Number",
            "type": "number"
          },
          "stringValue": {
            "description": "Value holder of type String",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiStockOrderEvidenceTypeValue": {
        "properties": {
          "date": {
            "description": "The date of the document upload",
            "format": "date-time",
            "type": "string"
          },
          "document": {
            "$ref": "#/components/schemas/ApiDocument",
            "description": "The attached document reference of the processing evidence"
          },
          "evidenceTypeCode": {
            "description": "The field code of the Processing evidence type from the codebook",
            "type": "string"
          },
          "evidenceTypeId": {
            "description": "The id of the Processing evidence type from the codebook",
            "format": "int64",
            "type": "integer"
          },
          "evidenceTypeLabel": {
            "description": "The field label of the Processing evidence type from the codebook",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiStockOrderHistory": {
        "properties": {
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "outputTransactions": {
            "description": "The Stock order output transactions",
            "items": {
              "$ref": "#/components/schemas/ApiTransaction"
            },
            "type": "array"
          },
          "processingOrder": {
            "$ref": "#/components/schemas/ApiProcessingOrder",
            "description": "The Processing order for which the history is requested"
          },
          "stockOrder": {
            "$ref": "#/components/schemas/ApiStockOrder",
            "description": "The Stock order for which the history is requested"
          },
          "timelineItems": {
            "description": "List of history timeline items",
            "items": {
              "$ref": "#/components/schemas/ApiStockOrderHistoryTimelineItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiStockOrderHistoryTimelineItem": {
        "properties": {
          "depth": {
            "description": "Depth of aggregation history",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "processingOrder": {
            "$ref": "#/components/schemas/ApiProcessingOrder",
            "description": "The Processing order representing this processing step (used when not Purchase order)"
          },
          "purchaseOrders": {
            "description": "Aggregated Purchase orders",
            "items": {
              "$ref": "#/components/schemas/ApiStockOrder"
            },
            "type": "array"
          },
          "stockOrder": {
            "$ref": "#/components/schemas/ApiStockOrder",
            "description": "Stock order representing this processing step (used in Purchase orders)"
          }
        },
        "type": "object"
      },
      "ApiStockOrderLocation": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ApiAddress",
            "description": "Location address"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "latitude": {
            "description": "Location latitude",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "Location longitude",
            "format": "double",
            "type": "number"
          },
          "numberOfFarmers": {
            "description": "Number of frames",
            "format": "int32",
            "type": "integer"
          },
          "pinName": {
            "description": "Pin name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiSustainability": {
        "properties": {
          "co2Footprint": {
            "description": "CO2 footprint - If you have calculated your company CO2 footprint, please add this information",
            "type": "string"
          },
          "packaging": {
            "description": "sustainable packaging - Describe the environmental sustainability of your packaging, max 1000 chars",
            "type": "string"
          },
          "production": {
            "description": "environmentally friendly production, max 1000 chars",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiToken": {
        "properties": {
          "token": {
            "description": "Entity id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransaction": {
        "properties": {
          "company": {
            "$ref": "#/components/schemas/ApiCompany",
            "description": "Company that is part of the transaction"
          },
          "currency": {
            "description": "Currency",
            "type": "string"
          },
          "finalProduct": {
            "$ref": "#/components/schemas/ApiFinalProduct",
            "description": "Final product"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "initiationUserId": {
            "description": "Initiator user ID",
            "format": "int64",
            "type": "integer"
          },
          "inputMeasureUnitType": {
            "$ref": "#/components/schemas/ApiMeasureUnitType",
            "description": "Input measurement unit type"
          },
          "inputQuantity": {
            "description": "Input quantity",
            "type": "number"
          },
          "isProcessing": {
            "description": "Is order of type processing",
            "example": false,
            "type": "boolean"
          },
          "outputQuantity": {
            "description": "Output quantity",
            "type": "number"
          },
          "pricePerUnit": {
            "description": "Price per unit",
            "type": "number"
          },
          "rejectComment": {
            "description": "Reject comment",
            "type": "string"
          },
          "semiProduct": {
            "$ref": "#/components/schemas/ApiSemiProduct",
            "description": "Semi product"
          },
          "shipmentId": {
            "description": "Shipment ID",
            "format": "int64",
            "type": "integer"
          },
          "sourceFacility": {
            "$ref": "#/components/schemas/ApiFacility",
            "description": "Source facility"
          },
          "sourceStockOrder": {
            "$ref": "#/components/schemas/ApiStockOrder",
            "description": "Source stock order"
          },
          "status": {
            "description": "Transaction status",
            "enum": [
              "PENDING",
              "CANCELED",
              "EXECUTED"
            ],
            "type": "string"
          },
          "targetStockOrder": {
            "$ref": "#/components/schemas/ApiStockOrder",
            "description": "Target stock order"
          }
        },
        "type": "object"
      },
      "ApiUser": {
        "properties": {
          "email": {
            "description": "Email/username",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "role": {
            "description": "User role",
            "enum": [
              "USER",
              "ADMIN",
              "MANAGER",
              "ACCOUNTANT"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status",
            "enum": [
              "UNCONFIRMED",
              "CONFIRMED_EMAIL",
              "ACTIVE",
              "DEACTIVATED"
            ],
            "type": "string"
          },
          "surname": {
            "description": "Surname",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserBase": {
        "properties": {
          "email": {
            "description": "Email/username",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "role": {
            "description": "User role",
            "enum": [
              "USER",
              "ADMIN",
              "MANAGER",
              "ACCOUNTANT"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status",
            "enum": [
              "UNCONFIRMED",
              "CONFIRMED_EMAIL",
              "ACTIVE",
              "DEACTIVATED"
            ],
            "type": "string"
          },
          "surname": {
            "description": "Surname",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserCustomer": {
        "properties": {
          "associations": {
            "description": "List of associations",
            "items": {
              "$ref": "#/components/schemas/ApiUserCustomerAssociation"
            },
            "type": "array"
          },
          "bank": {
            "$ref": "#/components/schemas/ApiBankInformation",
            "description": "Bank information"
          },
          "certifications": {
            "description": "User customer certifications",
            "items": {
              "$ref": "#/components/schemas/ApiCertification"
            },
            "type": "array"
          },
          "companyId": {
            "description": "Company id",
            "format": "int64",
            "type": "integer"
          },
          "cooperatives": {
            "description": "List of cooperatives",
            "items": {
              "$ref": "#/components/schemas/ApiUserCustomerCooperative"
            },
            "type": "array"
          },
          "email": {
            "description": "Email",
            "type": "string"
          },
          "farm": {
            "$ref": "#/components/schemas/ApiFarmInformation",
            "description": "Farm information"
          },
          "farmerCompanyInternalId": {
            "description": "Company internal farmer ID",
            "type": "string"
          },
          "gender": {
            "description": "Gender",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "type": "string"
          },
          "hasSmartphone": {
            "description": "Has smartphone",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "location": {
            "$ref": "#/components/schemas/ApiUserCustomerLocation",
            "description": "Location"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "phone": {
            "description": "Phone",
            "type": "string"
          },
          "productTypes": {
            "description": "User customer product types",
            "items": {
              "$ref": "#/components/schemas/ApiProductType"
            },
            "type": "array"
          },
          "surname": {
            "description": "Surname",
            "type": "string"
          },
          "type": {
            "description": "Type",
            "enum": [
              "COLLECTOR",
              "FARMER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserCustomerAssociation": {
        "properties": {
          "company": {
            "$ref": "#/components/schemas/ApiCompany",
            "description": "Company"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "userCustomer": {
            "$ref": "#/components/schemas/ApiUserCustomer",
            "description": "User customer"
          }
        },
        "type": "object"
      },
      "ApiUserCustomerCooperative": {
        "properties": {
          "company": {
            "$ref": "#/components/schemas/ApiCompany",
            "description": "Company"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "userCustomer": {
            "$ref": "#/components/schemas/ApiUserCustomer",
            "description": "User customer"
          },
          "userCustomerType": {
            "description": "User customer type (collector, farmer)",
            "enum": [
              "COLLECTOR",
              "FARMER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserCustomerImportResponse": {
        "properties": {
          "duplicates": {
            "items": {
              "$ref": "#/components/schemas/ApiUserCustomer"
            },
            "type": "array"
          },
          "successful": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiUserCustomerLocation": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ApiAddress",
            "description": "location address"
          },
          "latitude": {
            "description": "location latitude",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "location longitude",
            "format": "double",
            "type": "number"
          },
          "numberOfFarmers": {
            "description": "number of farmers at this location",
            "format": "int32",
            "type": "integer"
          },
          "pinName": {
            "description": "pin (location) name",
            "type": "string"
          },
          "publiclyVisible": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiUserGet": {
        "properties": {
          "actions": {
            "description": "Possible actions",
            "items": {
              "enum": [
                "VIEW_USER_PROFILE",
                "CREATE_COMPANY",
                "UPDATE_USER_PROFILE",
                "ACTIVATE_USER",
                "CONFIRM_USER_EMAIL",
                "DEACTIVATE_USER",
                "SET_USER_ADMIN",
                "UNSET_USER_ADMIN",
                "SET_USER_ROLE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "companyIds": {
            "description": "User's company ids",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "companyIdsAdmin": {
            "description": "User's company ids where user is company admin",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "email": {
            "description": "Email/username",
            "type": "string"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "language": {
            "description": "language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "role": {
            "description": "User role",
            "enum": [
              "USER",
              "ADMIN",
              "MANAGER",
              "ACCOUNTANT"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status",
            "enum": [
              "UNCONFIRMED",
              "CONFIRMED_EMAIL",
              "ACTIVE",
              "DEACTIVATED"
            ],
            "type": "string"
          },
          "surname": {
            "description": "Surname",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserRole": {
        "properties": {
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "role": {
            "description": "Role",
            "enum": [
              "USER",
              "ADMIN",
              "MANAGER",
              "ACCOUNTANT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserUpdate": {
        "properties": {
          "language": {
            "description": "language",
            "enum": [
              "EN",
              "DE",
              "RW",
              "ES"
            ],
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "surname": {
            "description": "Surname",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiValidationErrorDetails": {
        "properties": {
          "className": {
            "type": "string"
          },
          "fieldErrors": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ApiValueChain": {
        "properties": {
          "description": {
            "description": "description of the value chain",
            "type": "string"
          },
          "facilityTypes": {
            "description": "list of supported facility types",
            "items": {
              "$ref": "#/components/schemas/ApiFacilityType"
            },
            "type": "array"
          },
          "id": {
            "description": "Entity id",
            "format": "int64",
            "type": "integer"
          },
          "measureUnitTypes": {
            "description": "list of supported measuring unit types",
            "items": {
              "$ref": "#/components/schemas/ApiMeasureUnitType"
            },
            "type": "array"
          },
          "name": {
            "description": "name of the value chain",
            "type": "string"
          },
          "processingEvidenceFields": {
            "description": "list of supported processing evidence fields",
            "items": {
              "$ref": "#/components/schemas/ApiProcessingEvidenceField"
            },
            "type": "array"
          },
          "processingEvidenceTypes": {
            "description": "list of supported processing evidence types",
            "items": {
              "$ref": "#/components/schemas/ApiProcessingEvidenceType"
            },
            "type": "array"
          },
          "productType": {
            "$ref": "#/components/schemas/ApiProductType",
            "description": "Selected product type"
          },
          "semiProducts": {
            "description": "list of supported semi-products",
            "items": {
              "$ref": "#/components/schemas/ApiSemiProduct"
            },
            "type": "array"
          },
          "valueChainStatus": {
            "description": "value chain status",
            "enum": [
              "ENABLED",
              "DISABLED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ModelAndView": {
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "model": {
            "type": "object"
          },
          "modelMap": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "reference": {
            "type": "boolean"
          },
          "status": {
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ],
            "type": "string"
          },
          "view": {
            "$ref": "#/components/schemas/View"
          },
          "viewName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "View": {
        "properties": {
          "contentType": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "X-AUTH-TOKEN": {
        "in": "header",
        "name": "X-AUTH-TOKEN",
        "type": "apiKey"
      }
    }
  },
  "tags": [
    {
      "description": "Product Controller",
      "name": "product-controller"
    },
    {
      "description": "Common Controller",
      "name": "common-controller"
    },
    {
      "description": "Product Order Controller",
      "name": "product-order-controller"
    },
    {
      "description": "Measure Unit Type Controller",
      "name": "measure-unit-type-controller"
    },
    {
      "description": "Basic Error Controller",
      "name": "basic-error-controller"
    },
    {
      "description": "Processing Evidence Type Controller",
      "name": "processing-evidence-type-controller"
    },
    {
      "description": "Facility Type Controller",
      "name": "facility-type-controller"
    },
    {
      "description": "Stock Order Controller",
      "name": "stock-order-controller"
    },
    {
      "description": "Payment Controller",
      "name": "payment-controller"
    },
    {
      "description": "Currency Controller",
      "name": "currency-controller"
    },
    {
      "description": "Processing Order Controller",
      "name": "processing-order-controller"
    },
    {
      "description": "Semi Product Controller",
      "name": "semi-product-controller"
    },
    {
      "description": "Public Controller",
      "name": "public-controller"
    },
    {
      "description": "Action Type Controller",
      "name": "action-type-controller"
    },
    {
      "description": "Beyco Order Controller",
      "name": "beyco-order-controller"
    },
    {
      "description": "Company Controller",
      "name": "company-controller"
    },
    {
      "description": "Processing Evidence Field Controller",
      "name": "processing-evidence-field-controller"
    },
    {
      "description": "Processing Action Controller",
      "name": "processing-action-controller"
    },
    {
      "description": "Value Chain Controller",
      "name": "value-chain-controller"
    },
    {
      "description": "Group Stock Order Controller",
      "name": "group-stock-order-controller"
    },
    {
      "description": "Currency Type Controller",
      "name": "currency-type-controller"
    },
    {
      "description": "Facility Controller",
      "name": "facility-controller"
    },
    {
      "description": "Transaction Controller",
      "name": "transaction-controller"
    },
    {
      "description": "Final Product Controller",
      "name": "final-product-controller"
    },
    {
      "description": "User Controller",
      "name": "user-controller"
    },
    {
      "description": "Product Type Controller",
      "name": "product-type-controller"
    },
    {
      "description": "Common Csv Controller",
      "name": "common-csv-controller"
    }
  ]
}